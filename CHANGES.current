Below are the changes for the current release.
See the CHANGES file for changes in older releases.
See the RELEASENOTES file for a summary of changes in each release.

Version 3.0.7 (in progress)
===========================

2015-07-22: wsfulton
            Support for special variable expansion in typemap attributes. Example usage expansion
            in the 'out' attribute (C# specific):

              %typemap(ctype, out="$*1_ltype") unsigned int& "$*1_ltype"

            is equivalent to the following as $*1_ltype expands to 'unsigned int':

              %typemap(ctype, out="unsigned int") unsigned int& "unsigned int"

            Special variables can be used within special variable macros too. Example usage expansion:

              %typemap(cstype) unsigned int "uint"
              %typemap(cstype, out="$typemap(cstype, $*1_ltype)") unsigned int& "$typemap(cstype, $*1_ltype)"

            Special variables are expanded first and hence the above is equivalent to:

              %typemap(cstype, out="$typemap(cstype, unsigned int)") unsigned int& "$typemap(cstype, unsigned int)"

            which then expands to:

              %typemap(cstype, out="uint") unsigned int& "uint"

2015-07-22: lindleyf
	    Apply patch #439 - support for $typemap() (aka embedded typemaps or special variable
            macros) in typemap attributes. A simple example where $typemap() is expanded in the
            'out' attribute (C# specific):

              %typemap(cstype) unsigned int "uint"
              %typemap(cstype, out="$typemap(cstype, unsigned int)") unsigned int& "$typemap(cstype, unsigned int)"

            is equivalent to:

              %typemap(cstype, out="uint") unsigned int& "uint"

2015-07-18: m7thon
	    [Python] Docstrings provided via %feature("docstring") are now quoted and added to
            the tp_doc slot when using python builtin classes (-builtin). When no docstring is
            provided, the tp_doc slot is set to the fully qualified C/C++ class name.
            Github issues #445 and #461.

2015-07-17: kwwette
            [octave] Support Octave version 4.0.0 (thanks to patches from Orion Poplawski).

2015-07-07: wsfulton
	    SWIG no longer generates a wrapper for a class' constructor if that class has
            any base class with a private destructor. This is because your compiler should
            not allow a class to be instantiated if a base has a private destructor. Some
            compilers do, so if you need the old behaviour, use the "notabstract" feature, eg:

              %feature("notabstract") Derived;
              class Base {
                ~Base() {}
              };
              struct Derived : Base {};


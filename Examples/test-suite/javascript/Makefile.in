#######################################################################
# Makefile for javascript test-suite
#######################################################################

LANGUAGE     = javascript
SCRIPTSUFFIX = _runme.js
srcdir       = @srcdir@
top_srcdir   = @top_srcdir@
top_builddir = @top_builddir@
JS_INCLUDE   = @JSCOREINC@
JS_DLNK      = @JSCOREDYNAMICLINKING@
JSCXXFLAGS  = @JSCXXFLAGS@
JAVASCRIPT_EXE = node
SWIG 				= $(top_builddir)/preinst_swig

C_TEST_CASES = \
	preproc


CPP_TEST_CASES = \
	abstract_access \
	abstract_typedef \
	abstract_typedef2 \
	abstract_virtual \
	arrays_global \
	array_member \
	char_binary \
	class_ignore \
	class_scope_weird \
	constover \
	cpp_enum \
	cpp_namespace \
	cpp_static \
	director_alternating \
	enum_template \
	namespace_virtual_method \
	overload_copy \
	ret_by_value \
	struct_value \
	template_static \
	typedef_class \
	typedef_inherit \
	typedef_scope \
	typemap_arrays \
	typemap_delete \
	typemap_namespace \
	typemap_ns_using \
	using1 \
	using2 \
	javascript_unicode

BROKEN_TEST_CASES = \
	complextest \
	constructor_copy \
	preproc_include

SKIP_CPP_CASES = @SKIP_CPP_CASES@
SKIP_C_CASES = @SKIP_C_CASES@
SKIP_CPP_STD_CASES = @SKIP_CPP_STD_CASES@
SKIP_MULTI_CPP_CASES = @SKIP_MULTI_CPP_CASES@

include $(srcdir)/../common.mk

# Overridden variables here

# Custom tests - tests with additional commandline options

# Rules for the different types of tests
%.cpptest:
	$(prepare_test)
	$(generate_cpp_wrapper)
	$(build_module)
	$(run_testcase)

%.ctest:
	$(prepare_test)
	$(generate_cpp_wrapper)
	$(build_module)
	$(run_testcase)

%.multicpptest:
	$(prepare_test)
	$(generate_cpp_wrapper)
	$(build_module)
	$(run_testcase)

prepare_test = \
	sh ./setup_test.sh $*

generate_cpp_wrapper = \
	$(SWIG) -c++ -javascript -node -o $*/$*_wrap.cxx ../$*.i

build_module = \
	cd $* && node-gyp configure build && cd ..

# Runs the testcase. A testcase is only run if
# a file is found which has _runme.js appended after the testcase name.
run_testcase = \
	if [ -f $(srcdir)/$*$(SCRIPTSUFFIX) ]; then \
	  node $(srcdir)/$*$(SCRIPTSUFFIX); \
	fi

# Clean
%.clean:

clean:
	$(MAKE) -f $(top_builddir)/$(EXAMPLES)/Makefile javascript_clean

#######################################################################
# Makefile for hhvm test-suite
#######################################################################

LANGUAGE     = hhvm
SCRIPTSUFFIX = _runme.php

srcdir       = @srcdir@
top_srcdir   = ../@top_srcdir@
top_builddir = ../@top_builddir@
OBJEXT = @OBJEXT@
SO = @SO@

FAILING_C_TESTS +=          \
    enums                   \
    inctest                 \
    nested                  \
    nested_extend_c         \
    nested_structs          \
    overload_extend2        \
    overload_extend_c       \
    preproc_include         \
    typedef_struct          \
    typemap_subst           \

FAILING_CPP_TESTS =         \
    aggregate               \
    apply_strings           \
    arrays_global           \
    autodoc                 \
    catches                 \
    class_scope_weird       \
    constant_pointers       \
    constructor_copy        \
    contract                \
    cpp_basic               \
    default_args            \
    default_constructor     \
    default_target          \
    defvalue_constructor    \
    director_abstract       \
    director_basic          \
    director_nspace         \
    director_overload       \
    director_property       \
    dynamic_cast            \
    exception_order         \
    extend_placement        \
    features                \
    friends                 \
    friends_template        \
    ignore_parameter        \
    ignore_template_constructor \
    import_nomodule         \
    kwargs_feature          \
    li_boost_shared_ptr     \
    li_boost_shared_ptr_bits    \
    li_std_combinations     \
    li_std_deque            \
    li_std_except           \
    li_std_except_as_class  \
    li_std_map              \
    li_std_pair             \
    li_std_pair_using       \
    li_std_vector           \
    li_std_vector_enum      \
    li_std_vector_member_var    \
    li_std_vector_ptr       \
    li_swigtype_inout       \
    li_typemaps             \
    li_typemaps_apply       \
    long_long_apply         \
    member_funcptr_galore   \
    member_pointer          \
    minherit                \
    mixed_types             \
    multiple_inheritance_interfaces \
    namespace_spaces        \
    naturalvar_more         \
    operator_overload       \
    operator_overload_break \
    overload_copy           \
    overload_method         \
    overload_rename         \
    overload_return_type    \
    overload_template       \
    overload_template_fast  \
    pointer_reference       \
    primitive_ref           \
    redefined               \
    refcount                \
    rename1                 \
    rename2                 \
    rename3                 \
    rename4                 \
    rename_scope            \
    return_const_value      \
    sizet                   \
    smart_pointer_const     \
    smart_pointer_const2    \
    smart_pointer_const_overload    \
    smart_pointer_extend    \
    smart_pointer_ignore    \
    smart_pointer_inherit   \
    smart_pointer_member    \
    smart_pointer_multi     \
    smart_pointer_multi_typedef \
    smart_pointer_namespace     \
    smart_pointer_namespace2    \
    smart_pointer_overload  \
    smart_pointer_protected \
    smart_pointer_rename    \
    smart_pointer_simple    \
    smart_pointer_template_const_overload   \
    smart_pointer_template_defaults_overload    \
    smart_pointer_templatemethods   \
    smart_pointer_templatevariables \
    smart_pointer_typedef   \
    special_variable_macros \
    special_variables       \
    template_default        \
    template_default_arg    \
    template_default_arg_overloaded \
    template_default_arg_overloaded_extend  \
    template_default_class_parms_typedef    \
    template_default_vw     \
    template_extend_overload    \
    template_ns             \
    template_opaque         \
    template_type_namespace \
    template_typedef_cplx2  \
    template_typedef_cplx3  \
    template_typedef_cplx4  \
    template_typedef_fnc    \
    typemap_namespace       \
    typemap_out_optimal     \
    typemap_qualifier_strip \
    valuewrapper            \
    valuewrapper_opaque     \
    virtual_poly            \
    wrapmacro               \

FAILING_MULTI_CPP_TESTS =   \
	clientdata_prop         \
	imports                 \
	import_stl              \
	packageoption           \
	mod                     \
	template_typedef_import \
	multi_import            \

include $(srcdir)/../common.mk

# Overridden variables here
SRCDIR       = ../$(srcdir)/

# Custom tests - tests with additional commandline options
prefix.cpptest: SWIGOPT += -prefix Project

# write out tests without a _runme.php
missingcpptests:
	for test in $(CPP_TEST_CASES) ; do test -f $${test}_runme.php || echo $${test}; done

missingctests:
	for test in $(C_TEST_CASES) ; do test -f $${test}_runme.php || echo $${test}; done

missingtests: missingcpptests missingctests

# Rules for the different types of tests
%.cpptest:
	$(setup)
	+(cd $* && $(swig_and_compile_cpp))
	+$(run_testcase)

%.ctest:
	$(setup)
	+(cd $* && $(swig_and_compile_c))
	+$(run_testcase)

%.multicpptest:
	$(setup)
	+(cd $* && $(swig_and_compile_multi_cpp))
	+$(run_testcase)

# Makes a directory for the testcase if it does not exist
setup = \
	if [ -f $(SCRIPTDIR)/$(SCRIPTPREFIX)$*$(SCRIPTSUFFIX) ]; then	  \
	  echo "$(ACTION)ing $(LANGUAGE) testcase $* (with run test)" ; \
	else								  \
	  echo "$(ACTION)ing $(LANGUAGE) testcase $*" ;		  \
	fi;								  \
	if [ ! -d $* ]; then						  \
	  mkdir $* &&							  \
      sed -e 's|$$testcase|$*|g;' $(srcdir)/config.cmake > $*/config.cmake;   \
	fi;

# Runs the testcase. Tries to run testcase_runme.php.
run_testcase = \
	if [ -f $(SCRIPTDIR)/$(SCRIPTPREFIX)$*$(SCRIPTSUFFIX) ]; then \
	   $(MAKE) -f $*/$(top_builddir)/$(EXAMPLES)/Makefile HHVM_SCRIPT=$(SCRIPTDIR)/$(SCRIPTPREFIX)$*$(SCRIPTSUFFIX) TARGET='$*/$*' RUNTOOL='$(RUNTOOL)' hhvm_run; \
	fi

# Clean: remove testcase directories
%.clean:
	@if [ -d $* ]; then \
	  rm -rf $*; \
	fi

clean:
	rm -f ext_* *~ .~* example.php run-test CMakeLists.txt
	rm -rf build
	rm -f *.@OBJEXT@ *$(SO)

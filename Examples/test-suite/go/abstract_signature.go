/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../abstract_signature.i

package abstract_signature

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrAbstract_foo uintptr

func (p SwigcptrAbstract_foo) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrAbstract_foo) SwigIsAbstract_foo() {
}

var _wrap_delete_abstract_foo unsafe.Pointer

func _swig_wrap_delete_abstract_foo(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_abstract_foo, _swig_p)
	return
}

func DeleteAbstract_foo(arg1 Abstract_foo) {
	_swig_wrap_delete_abstract_foo(arg1.Swigcptr())
}

var _wrap_abstract_foo_meth unsafe.Pointer

func _swig_wrap_abstract_foo_meth(base SwigcptrAbstract_foo, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_abstract_foo_meth, _swig_p)
	return
}

func (arg1 SwigcptrAbstract_foo) Meth(arg2 int) (_swig_ret int) {
	return _swig_wrap_abstract_foo_meth(arg1, arg2)
}

type Abstract_foo interface {
	Swigcptr() uintptr
	SwigIsAbstract_foo()
	Meth(arg2 int) (_swig_ret int)
}

type SwigcptrAbstract_bar uintptr

func (p SwigcptrAbstract_bar) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrAbstract_bar) SwigIsAbstract_bar() {
}

var _wrap_delete_abstract_bar unsafe.Pointer

func _swig_wrap_delete_abstract_bar(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_abstract_bar, _swig_p)
	return
}

func DeleteAbstract_bar(arg1 Abstract_bar) {
	_swig_wrap_delete_abstract_bar(arg1.Swigcptr())
}

var _wrap_abstract_bar_meth__SWIG_0 unsafe.Pointer

func _swig_wrap_abstract_bar_meth__SWIG_0(base SwigcptrAbstract_bar, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_abstract_bar_meth__SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrAbstract_bar) Meth__SWIG_0(arg2 int) (_swig_ret int) {
	return _swig_wrap_abstract_bar_meth__SWIG_0(arg1, arg2)
}

var _wrap_abstract_bar_meth__SWIG_1 unsafe.Pointer

func _swig_wrap_abstract_bar_meth__SWIG_1(base SwigcptrAbstract_bar, _ int, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_abstract_bar_meth__SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrAbstract_bar) Meth__SWIG_1(arg2 int, arg3 int) (_swig_ret int) {
	return _swig_wrap_abstract_bar_meth__SWIG_1(arg1, arg2, arg3)
}

func (p SwigcptrAbstract_bar) Meth(a ...interface{}) int {
	argc := len(a)
	if argc == 1 {
		return p.Meth__SWIG_0(a[0].(int))
	}
	if argc == 2 {
		return p.Meth__SWIG_1(a[0].(int), a[1].(int))
	}
	panic("No match for overloaded function call")
}

func (p SwigcptrAbstract_bar) SwigIsAbstract_foo() {
}

func (p SwigcptrAbstract_bar) SwigGetAbstract_foo() Abstract_foo {
	return SwigcptrAbstract_foo(p.Swigcptr())
}

type Abstract_bar interface {
	Swigcptr() uintptr
	SwigIsAbstract_bar()
	Meth(a ...interface{}) int
	SwigIsAbstract_foo()
	SwigGetAbstract_foo() Abstract_foo
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


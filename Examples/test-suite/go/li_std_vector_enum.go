/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../li_std_vector_enum.i

package li_std_vector_enum

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrEnumVector uintptr

func (p SwigcptrEnumVector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrEnumVector) SwigIsEnumVector() {
}

var _wrap_new_EnumVector unsafe.Pointer

func _swig_wrap_new_EnumVector() (base SwigcptrEnumVector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_EnumVector, _swig_p)
	return
}

func NewEnumVector() (_swig_ret EnumVector) {
	return _swig_wrap_new_EnumVector()
}

type EnumVectorNumbers int
var _wrap_ten_EnumVector unsafe.Pointer

func _swig_getEnumVector_ten_EnumVector() (_swig_ret EnumVectorNumbers) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ret))
	_cgo_runtime_cgocall(_wrap_ten_EnumVector, _swig_p)
	return
}
var EnumVectorTen EnumVectorNumbers = _swig_getEnumVector_ten_EnumVector()
var _wrap_twenty_EnumVector unsafe.Pointer

func _swig_getEnumVector_twenty_EnumVector() (_swig_ret EnumVectorNumbers) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ret))
	_cgo_runtime_cgocall(_wrap_twenty_EnumVector, _swig_p)
	return
}
var EnumVectorTwenty EnumVectorNumbers = _swig_getEnumVector_twenty_EnumVector()
var _wrap_thirty_EnumVector unsafe.Pointer

func _swig_getEnumVector_thirty_EnumVector() (_swig_ret EnumVectorNumbers) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ret))
	_cgo_runtime_cgocall(_wrap_thirty_EnumVector, _swig_p)
	return
}
var EnumVectorThirty EnumVectorNumbers = _swig_getEnumVector_thirty_EnumVector()
var _wrap_EnumVector_nums_set unsafe.Pointer

func _swig_wrap_EnumVector_nums_set(base SwigcptrEnumVector, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_EnumVector_nums_set, _swig_p)
	return
}

func (arg1 SwigcptrEnumVector) SetNums(arg2 Vector_numbers) {
	_swig_wrap_EnumVector_nums_set(arg1, arg2.Swigcptr())
}

var _wrap_EnumVector_nums_get unsafe.Pointer

func _swig_wrap_EnumVector_nums_get(base SwigcptrEnumVector) (_ SwigcptrVector_numbers) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_EnumVector_nums_get, _swig_p)
	return
}

func (arg1 SwigcptrEnumVector) GetNums() (_swig_ret Vector_numbers) {
	return _swig_wrap_EnumVector_nums_get(arg1)
}

var _wrap_EnumVector_fill_numbers unsafe.Pointer

func _swig_wrap_EnumVector_fill_numbers(base SwigcptrEnumVector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_EnumVector_fill_numbers, _swig_p)
	return
}

func (arg1 SwigcptrEnumVector) Fill_numbers() {
	_swig_wrap_EnumVector_fill_numbers(arg1)
}

var _wrap_delete_EnumVector unsafe.Pointer

func _swig_wrap_delete_EnumVector(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_EnumVector, _swig_p)
	return
}

func DeleteEnumVector(arg1 EnumVector) {
	_swig_wrap_delete_EnumVector(arg1.Swigcptr())
}

type EnumVector interface {
	Swigcptr() uintptr
	SwigIsEnumVector()
	SetNums(arg2 Vector_numbers)
	GetNums() (_swig_ret Vector_numbers)
	Fill_numbers()
}

type SwigcptrVector_numbers uintptr

func (p SwigcptrVector_numbers) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrVector_numbers) SwigIsVector_numbers() {
}

var _wrap_new_vector_numbers__SWIG_0 unsafe.Pointer

func _swig_wrap_new_vector_numbers__SWIG_0() (base SwigcptrVector_numbers) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_vector_numbers__SWIG_0, _swig_p)
	return
}

func NewVector_numbers__SWIG_0() (_swig_ret Vector_numbers) {
	return _swig_wrap_new_vector_numbers__SWIG_0()
}

var _wrap_new_vector_numbers__SWIG_1 unsafe.Pointer

func _swig_wrap_new_vector_numbers__SWIG_1(base int64) (_ SwigcptrVector_numbers) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_vector_numbers__SWIG_1, _swig_p)
	return
}

func NewVector_numbers__SWIG_1(arg1 int64) (_swig_ret Vector_numbers) {
	return _swig_wrap_new_vector_numbers__SWIG_1(arg1)
}

func NewVector_numbers(a ...interface{}) Vector_numbers {
	argc := len(a)
	if argc == 0 {
		return NewVector_numbers__SWIG_0()
	}
	if argc == 1 {
		return NewVector_numbers__SWIG_1(a[0].(int64))
	}
	panic("No match for overloaded function call")
}

var _wrap_vector_numbers_size unsafe.Pointer

func _swig_wrap_vector_numbers_size(base SwigcptrVector_numbers) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_vector_numbers_size, _swig_p)
	return
}

func (arg1 SwigcptrVector_numbers) Size() (_swig_ret int64) {
	return _swig_wrap_vector_numbers_size(arg1)
}

var _wrap_vector_numbers_capacity unsafe.Pointer

func _swig_wrap_vector_numbers_capacity(base SwigcptrVector_numbers) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_vector_numbers_capacity, _swig_p)
	return
}

func (arg1 SwigcptrVector_numbers) Capacity() (_swig_ret int64) {
	return _swig_wrap_vector_numbers_capacity(arg1)
}

var _wrap_vector_numbers_reserve unsafe.Pointer

func _swig_wrap_vector_numbers_reserve(base SwigcptrVector_numbers, _ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_vector_numbers_reserve, _swig_p)
	return
}

func (arg1 SwigcptrVector_numbers) Reserve(arg2 int64) {
	_swig_wrap_vector_numbers_reserve(arg1, arg2)
}

var _wrap_vector_numbers_isEmpty unsafe.Pointer

func _swig_wrap_vector_numbers_isEmpty(base SwigcptrVector_numbers) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_vector_numbers_isEmpty, _swig_p)
	return
}

func (arg1 SwigcptrVector_numbers) IsEmpty() (_swig_ret bool) {
	return _swig_wrap_vector_numbers_isEmpty(arg1)
}

var _wrap_vector_numbers_clear unsafe.Pointer

func _swig_wrap_vector_numbers_clear(base SwigcptrVector_numbers) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_vector_numbers_clear, _swig_p)
	return
}

func (arg1 SwigcptrVector_numbers) Clear() {
	_swig_wrap_vector_numbers_clear(arg1)
}

var _wrap_vector_numbers_add unsafe.Pointer

func _swig_wrap_vector_numbers_add(base SwigcptrVector_numbers, _ *EnumVectorNumbers) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_vector_numbers_add, _swig_p)
	return
}

func (arg1 SwigcptrVector_numbers) Add(arg2 *EnumVectorNumbers) {
	_swig_wrap_vector_numbers_add(arg1, arg2)
}

var _wrap_vector_numbers_get unsafe.Pointer

func _swig_wrap_vector_numbers_get(base SwigcptrVector_numbers, _ int) (_ *EnumVectorNumbers) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_vector_numbers_get, _swig_p)
	return
}

func (arg1 SwigcptrVector_numbers) Get(arg2 int) (_swig_ret *EnumVectorNumbers) {
	return _swig_wrap_vector_numbers_get(arg1, arg2)
}

var _wrap_vector_numbers_set unsafe.Pointer

func _swig_wrap_vector_numbers_set(base SwigcptrVector_numbers, _ int, _ *EnumVectorNumbers) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_vector_numbers_set, _swig_p)
	return
}

func (arg1 SwigcptrVector_numbers) Set(arg2 int, arg3 *EnumVectorNumbers) {
	_swig_wrap_vector_numbers_set(arg1, arg2, arg3)
}

var _wrap_delete_vector_numbers unsafe.Pointer

func _swig_wrap_delete_vector_numbers(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_vector_numbers, _swig_p)
	return
}

func DeleteVector_numbers(arg1 Vector_numbers) {
	_swig_wrap_delete_vector_numbers(arg1.Swigcptr())
}

type Vector_numbers interface {
	Swigcptr() uintptr
	SwigIsVector_numbers()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 *EnumVectorNumbers)
	Get(arg2 int) (_swig_ret *EnumVectorNumbers)
	Set(arg2 int, arg3 *EnumVectorNumbers)
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


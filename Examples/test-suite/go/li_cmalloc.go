/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../li_cmalloc.i

package li_cmalloc

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

var _wrap_malloc_int unsafe.Pointer

func _swig_wrap_malloc_int(base int, _ int) (_ *int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_malloc_int, _swig_p)
	return
}

func Malloc_int(_swig_args ...interface{}) (_swig_ret *int) {
	var arg1 int
	if len(_swig_args) > 0 {
		arg1 = _swig_args[0].(int)
	}
	return _swig_wrap_malloc_int(len(_swig_args), arg1)
}

var _wrap_calloc_int unsafe.Pointer

func _swig_wrap_calloc_int(base int, _ int, _ int) (_ *int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_calloc_int, _swig_p)
	return
}

func Calloc_int(_swig_args ...interface{}) (_swig_ret *int) {
	var arg1 int
	if len(_swig_args) > 0 {
		arg1 = _swig_args[0].(int)
	}
	var arg2 int
	if len(_swig_args) > 1 {
		arg2 = _swig_args[1].(int)
	}
	return _swig_wrap_calloc_int(len(_swig_args), arg1, arg2)
}

var _wrap_realloc_int unsafe.Pointer

func Realloc_int(arg1 *int, arg2 int) (_swig_ret *int) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_realloc_int, _swig_p)
	return
}
var _wrap_free_int unsafe.Pointer

func _swig_wrap_free_int(base *int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_free_int, _swig_p)
	return
}

func Free_int(arg1 *int) {
	_swig_wrap_free_int(arg1)
}

var _wrap_sizeof_int unsafe.Pointer

func _swig_getsizeof_int() (_swig_ret int) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ret))
	_cgo_runtime_cgocall(_wrap_sizeof_int, _swig_p)
	return
}
var Sizeof_int int = _swig_getsizeof_int()
var _wrap_malloc_double unsafe.Pointer

func _swig_wrap_malloc_double(base int, _ int) (_ *float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_malloc_double, _swig_p)
	return
}

func Malloc_double(_swig_args ...interface{}) (_swig_ret *float64) {
	var arg1 int
	if len(_swig_args) > 0 {
		arg1 = _swig_args[0].(int)
	}
	return _swig_wrap_malloc_double(len(_swig_args), arg1)
}

var _wrap_calloc_double unsafe.Pointer

func _swig_wrap_calloc_double(base int, _ int, _ int) (_ *float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_calloc_double, _swig_p)
	return
}

func Calloc_double(_swig_args ...interface{}) (_swig_ret *float64) {
	var arg1 int
	if len(_swig_args) > 0 {
		arg1 = _swig_args[0].(int)
	}
	var arg2 int
	if len(_swig_args) > 1 {
		arg2 = _swig_args[1].(int)
	}
	return _swig_wrap_calloc_double(len(_swig_args), arg1, arg2)
}

var _wrap_realloc_double unsafe.Pointer

func Realloc_double(arg1 *float64, arg2 int) (_swig_ret *float64) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_realloc_double, _swig_p)
	return
}
var _wrap_free_double unsafe.Pointer

func _swig_wrap_free_double(base *float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_free_double, _swig_p)
	return
}

func Free_double(arg1 *float64) {
	_swig_wrap_free_double(arg1)
}

var _wrap_sizeof_double unsafe.Pointer

func _swig_getsizeof_double() (_swig_ret int) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ret))
	_cgo_runtime_cgocall(_wrap_sizeof_double, _swig_p)
	return
}
var Sizeof_double int = _swig_getsizeof_double()
var _wrap_malloc_void unsafe.Pointer

func Malloc_void(arg1 int) (_swig_ret uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_malloc_void, _swig_p)
	return
}
var _wrap_calloc_void unsafe.Pointer

func _swig_wrap_calloc_void(base int, _ int, _ int) (_ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_calloc_void, _swig_p)
	return
}

func Calloc_void(_swig_args ...interface{}) (_swig_ret uintptr) {
	var arg1 int
	if len(_swig_args) > 0 {
		arg1 = _swig_args[0].(int)
	}
	var arg2 int
	if len(_swig_args) > 1 {
		arg2 = _swig_args[1].(int)
	}
	return _swig_wrap_calloc_void(len(_swig_args), arg1, arg2)
}

var _wrap_realloc_void unsafe.Pointer

func Realloc_void(arg1 uintptr, arg2 int) (_swig_ret uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_realloc_void, _swig_p)
	return
}
var _wrap_free_void unsafe.Pointer

func _swig_wrap_free_void(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_free_void, _swig_p)
	return
}

func Free_void(arg1 uintptr) {
	_swig_wrap_free_void(arg1)
}

var _wrap_malloc_intp unsafe.Pointer

func _swig_wrap_malloc_intp(base int, _ int) (_ **int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_malloc_intp, _swig_p)
	return
}

func Malloc_intp(_swig_args ...interface{}) (_swig_ret **int) {
	var arg1 int
	if len(_swig_args) > 0 {
		arg1 = _swig_args[0].(int)
	}
	return _swig_wrap_malloc_intp(len(_swig_args), arg1)
}

var _wrap_calloc_intp unsafe.Pointer

func _swig_wrap_calloc_intp(base int, _ int, _ int) (_ **int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_calloc_intp, _swig_p)
	return
}

func Calloc_intp(_swig_args ...interface{}) (_swig_ret **int) {
	var arg1 int
	if len(_swig_args) > 0 {
		arg1 = _swig_args[0].(int)
	}
	var arg2 int
	if len(_swig_args) > 1 {
		arg2 = _swig_args[1].(int)
	}
	return _swig_wrap_calloc_intp(len(_swig_args), arg1, arg2)
}

var _wrap_realloc_intp unsafe.Pointer

func Realloc_intp(arg1 **int, arg2 int) (_swig_ret **int) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_realloc_intp, _swig_p)
	return
}
var _wrap_free_intp unsafe.Pointer

func _swig_wrap_free_intp(base **int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_free_intp, _swig_p)
	return
}

func Free_intp(arg1 **int) {
	_swig_wrap_free_intp(arg1)
}

var _wrap_sizeof_intp unsafe.Pointer

func _swig_getsizeof_intp() (_swig_ret int) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ret))
	_cgo_runtime_cgocall(_wrap_sizeof_intp, _swig_p)
	return
}
var Sizeof_intp int = _swig_getsizeof_intp()

type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../import_stl_a.i

package import_stl_a

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrVectorInt uintptr

func (p SwigcptrVectorInt) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrVectorInt) SwigIsVectorInt() {
}

var _wrap_new_VectorInt__SWIG_0 unsafe.Pointer

func _swig_wrap_new_VectorInt__SWIG_0() (base SwigcptrVectorInt) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_VectorInt__SWIG_0, _swig_p)
	return
}

func NewVectorInt__SWIG_0() (_swig_ret VectorInt) {
	return _swig_wrap_new_VectorInt__SWIG_0()
}

var _wrap_new_VectorInt__SWIG_1 unsafe.Pointer

func _swig_wrap_new_VectorInt__SWIG_1(base int64) (_ SwigcptrVectorInt) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_VectorInt__SWIG_1, _swig_p)
	return
}

func NewVectorInt__SWIG_1(arg1 int64) (_swig_ret VectorInt) {
	return _swig_wrap_new_VectorInt__SWIG_1(arg1)
}

func NewVectorInt(a ...interface{}) VectorInt {
	argc := len(a)
	if argc == 0 {
		return NewVectorInt__SWIG_0()
	}
	if argc == 1 {
		return NewVectorInt__SWIG_1(a[0].(int64))
	}
	panic("No match for overloaded function call")
}

var _wrap_VectorInt_size unsafe.Pointer

func _swig_wrap_VectorInt_size(base SwigcptrVectorInt) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectorInt_size, _swig_p)
	return
}

func (arg1 SwigcptrVectorInt) Size() (_swig_ret int64) {
	return _swig_wrap_VectorInt_size(arg1)
}

var _wrap_VectorInt_capacity unsafe.Pointer

func _swig_wrap_VectorInt_capacity(base SwigcptrVectorInt) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectorInt_capacity, _swig_p)
	return
}

func (arg1 SwigcptrVectorInt) Capacity() (_swig_ret int64) {
	return _swig_wrap_VectorInt_capacity(arg1)
}

var _wrap_VectorInt_reserve unsafe.Pointer

func _swig_wrap_VectorInt_reserve(base SwigcptrVectorInt, _ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectorInt_reserve, _swig_p)
	return
}

func (arg1 SwigcptrVectorInt) Reserve(arg2 int64) {
	_swig_wrap_VectorInt_reserve(arg1, arg2)
}

var _wrap_VectorInt_isEmpty unsafe.Pointer

func _swig_wrap_VectorInt_isEmpty(base SwigcptrVectorInt) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectorInt_isEmpty, _swig_p)
	return
}

func (arg1 SwigcptrVectorInt) IsEmpty() (_swig_ret bool) {
	return _swig_wrap_VectorInt_isEmpty(arg1)
}

var _wrap_VectorInt_clear unsafe.Pointer

func _swig_wrap_VectorInt_clear(base SwigcptrVectorInt) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectorInt_clear, _swig_p)
	return
}

func (arg1 SwigcptrVectorInt) Clear() {
	_swig_wrap_VectorInt_clear(arg1)
}

var _wrap_VectorInt_add unsafe.Pointer

func _swig_wrap_VectorInt_add(base SwigcptrVectorInt, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectorInt_add, _swig_p)
	return
}

func (arg1 SwigcptrVectorInt) Add(arg2 int) {
	_swig_wrap_VectorInt_add(arg1, arg2)
}

var _wrap_VectorInt_get unsafe.Pointer

func _swig_wrap_VectorInt_get(base SwigcptrVectorInt, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectorInt_get, _swig_p)
	return
}

func (arg1 SwigcptrVectorInt) Get(arg2 int) (_swig_ret int) {
	return _swig_wrap_VectorInt_get(arg1, arg2)
}

var _wrap_VectorInt_set unsafe.Pointer

func _swig_wrap_VectorInt_set(base SwigcptrVectorInt, _ int, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectorInt_set, _swig_p)
	return
}

func (arg1 SwigcptrVectorInt) Set(arg2 int, arg3 int) {
	_swig_wrap_VectorInt_set(arg1, arg2, arg3)
}

var _wrap_delete_VectorInt unsafe.Pointer

func _swig_wrap_delete_VectorInt(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_VectorInt, _swig_p)
	return
}

func DeleteVectorInt(arg1 VectorInt) {
	_swig_wrap_delete_VectorInt(arg1.Swigcptr())
}

type VectorInt interface {
	Swigcptr() uintptr
	SwigIsVectorInt()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 int)
	Get(arg2 int) (_swig_ret int)
	Set(arg2 int, arg3 int)
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


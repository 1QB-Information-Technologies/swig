/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../nested_directors.i

package nested_directors

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type _swig_DirectorBase struct {
	SwigcptrBase
	v interface{}
}

func (p *_swig_DirectorBase) Swigcptr() uintptr {
	return p.SwigcptrBase.Swigcptr()
}

func (p *_swig_DirectorBase) SwigIsBase() {
}

func (p *_swig_DirectorBase) DirectorInterface() interface{} {
	return p.v
}

var _wrap__swig_NewDirectorBaseBase unsafe.Pointer

func _swig_NewDirectorBaseBase(_swig_director *_swig_DirectorBase) (_swig_ret SwigcptrBase) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_director))
	_cgo_runtime_cgocall(_wrap__swig_NewDirectorBaseBase, _swig_p)
	return
}

func NewDirectorBase(v interface{}) Base {
	p := &_swig_DirectorBase{0, v}
	p.SwigcptrBase = _swig_NewDirectorBaseBase(p)
	return p
}

var _wrap_DeleteDirectorBase unsafe.Pointer

func _swig_wrap_DeleteDirectorBase(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_DeleteDirectorBase, _swig_p)
	return
}

func DeleteDirectorBase(arg1 Base) {
	_swig_wrap_DeleteDirectorBase(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_Base(p *_swig_DirectorBase) {
	p.SwigcptrBase = 0
}

type _swig_DirectorInterfaceBaseDoNothing interface {
	DoNothing() bool
}

func (swig_p *_swig_DirectorBase) DoNothing() bool {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceBaseDoNothing); swig_ok {
		return swig_g.DoNothing()
	}
	panic("call to pure virtual method")
}

func Swig_DirectorBase_callback_DoNothing(p *_swig_DirectorBase) (swig_result bool) {
	var swig_r bool
	swig_r = p.DoNothing()
	return swig_r
}

type SwigcptrBase uintptr

func (p SwigcptrBase) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrBase) SwigIsBase() {
}

func (p SwigcptrBase) DirectorInterface() interface{} {
	return nil
}

var _wrap_delete_Base unsafe.Pointer

func _swig_wrap_delete_Base(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Base, _swig_p)
	return
}

func DeleteBase(arg1 Base) {
	_swig_wrap_delete_Base(arg1.Swigcptr())
}

var _wrap_new_Base unsafe.Pointer

func _swig_wrap_new_Base() (base SwigcptrBase) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Base, _swig_p)
	return
}

func NewBase() (_swig_ret Base) {
	return _swig_wrap_new_Base()
}

type Base interface {
	Swigcptr() uintptr
	SwigIsBase()
	DirectorInterface() interface{}
}

type _swig_DirectorSub struct {
	SwigcptrSub
	v interface{}
}

func (p *_swig_DirectorSub) Swigcptr() uintptr {
	return p.SwigcptrSub.Swigcptr()
}

func (p *_swig_DirectorSub) SwigIsSub() {
}

func (p *_swig_DirectorSub) DirectorInterface() interface{} {
	return p.v
}

var _wrap__swig_NewDirectorSubSub unsafe.Pointer

func _swig_NewDirectorSubSub(_swig_director *_swig_DirectorSub) (_swig_ret SwigcptrSub) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_director))
	_cgo_runtime_cgocall(_wrap__swig_NewDirectorSubSub, _swig_p)
	return
}

func NewDirectorSub(v interface{}) Sub {
	p := &_swig_DirectorSub{0, v}
	p.SwigcptrSub = _swig_NewDirectorSubSub(p)
	return p
}

var _wrap_DeleteDirectorSub unsafe.Pointer

func _swig_wrap_DeleteDirectorSub(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_DeleteDirectorSub, _swig_p)
	return
}

func DeleteDirectorSub(arg1 Sub) {
	_swig_wrap_DeleteDirectorSub(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_Sub(p *_swig_DirectorSub) {
	p.SwigcptrSub = 0
}

type _swig_DirectorInterfaceSubDoNothing interface {
	DoNothing() bool
}

func (swig_p *_swig_DirectorSub) DoNothing() bool {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceSubDoNothing); swig_ok {
		return swig_g.DoNothing()
	}
	panic("call to pure virtual method")
}

func Swig_DirectorSub_callback_DoNothing(p *_swig_DirectorSub) (swig_result bool) {
	var swig_r bool
	swig_r = p.DoNothing()
	return swig_r
}

type _swig_DirectorInterfaceSubGetValue interface {
	GetValue() bool
}

var _wrap__swig_DirectorSub_upcall_GetValue unsafe.Pointer

func _swig_wrap__swig_DirectorSub_upcall_GetValue(_swig_ptr SwigcptrSub) (_swig_ret bool) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ptr))
	_cgo_runtime_cgocall(_wrap__swig_DirectorSub_upcall_GetValue, _swig_p)
	return
}

func (swig_p *_swig_DirectorSub) GetValue() bool {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceSubGetValue); swig_ok {
		return swig_g.GetValue()
	}
	var swig_r bool
	swig_r = _swig_wrap__swig_DirectorSub_upcall_GetValue(swig_p.SwigcptrSub)
	return swig_r
}

func DirectorSubGetValue(p Sub) bool {
	var swig_r bool
	swig_r = _swig_wrap__swig_DirectorSub_upcall_GetValue(p.(*_swig_DirectorSub).SwigcptrSub)
	return swig_r
}

func Swig_DirectorSub_callback_GetValue(p *_swig_DirectorSub) (swig_result bool) {
	var swig_r bool
	swig_r = p.GetValue()
	return swig_r
}

type SwigcptrSub uintptr

func (p SwigcptrSub) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrSub) SwigIsSub() {
}

func (p SwigcptrSub) DirectorInterface() interface{} {
	return nil
}

var _wrap_delete_Sub unsafe.Pointer

func _swig_wrap_delete_Sub(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Sub, _swig_p)
	return
}

func DeleteSub(arg1 Sub) {
	_swig_wrap_delete_Sub(arg1.Swigcptr())
}

var _wrap_new_Sub unsafe.Pointer

func _swig_wrap_new_Sub() (base SwigcptrSub) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Sub, _swig_p)
	return
}

func NewSub() (_swig_ret Sub) {
	return _swig_wrap_new_Sub()
}

func (p SwigcptrSub) SwigIsBase() {
}

func (p SwigcptrSub) SwigGetBase() Base {
	return SwigcptrBase(p.Swigcptr())
}

type Sub interface {
	Swigcptr() uintptr
	SwigIsSub()
	DirectorInterface() interface{}
	SwigIsBase()
	SwigGetBase() Base
}


type SwigcptrSwigDirector_Sub uintptr
type SwigDirector_Sub interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_Sub) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../allprotected.i

#ifndef SWIG_allprotected_WRAP_H_
#define SWIG_allprotected_WRAP_H_

class SwigDirector_PublicBase : public PublicBase
{
 public:
  SwigDirector_PublicBase(void *swig_p, char const *s);
  virtual ~SwigDirector_PublicBase();
  std::string _swig_upcall_virtualMethod() const {
    return PublicBase::virtualMethod();
  }
  virtual std::string virtualMethod() const;
 private:
  void *go_val;
};

class SwigDirector_ProtectedBase : public ProtectedBase
{
 public:
  SwigDirector_ProtectedBase(void *swig_p, char const *s);
  std::string _swig_upcall_virtualMethod() const {
    return ProtectedBase::virtualMethod();
  }
  virtual std::string virtualMethod() const;
    using ProtectedBase::instanceMethod;
    using ProtectedBase::instanceOverloaded;
    using ProtectedBase::staticMethod;
    using ProtectedBase::staticOverloaded;
    using ProtectedBase::instanceMemberVariable;
    using ProtectedBase::staticMemberVariable;
    using ProtectedBase::staticConstMemberVariable;
    using ProtectedBase::anEnum;
    using ProtectedBase::stringMember;
    using ProtectedBase::IntegerType;
 private:
  void *go_val;
};

#endif

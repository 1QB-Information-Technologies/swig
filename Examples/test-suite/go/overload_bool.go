/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../overload_bool.i

package overload_bool

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

var _wrap_overloaded__SWIG_0 unsafe.Pointer

func Overloaded__SWIG_0(arg1 bool) (_swig_ret string) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_overloaded__SWIG_0, _swig_p)
	return
}
var _wrap_overloaded__SWIG_1 unsafe.Pointer

func Overloaded__SWIG_1(arg1 int) (_swig_ret string) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_overloaded__SWIG_1, _swig_p)
	return
}
var _wrap_overloaded__SWIG_2 unsafe.Pointer

func Overloaded__SWIG_2(arg1 string) (_swig_ret string) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_overloaded__SWIG_2, _swig_p)
	return
}
func Overloaded(a ...interface{}) string {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(bool); !ok {
			goto check_1
		}
		return Overloaded__SWIG_0(a[0].(bool))
	}
check_1:
	if argc == 1 {
		if _, ok := a[0].(int); !ok {
			goto check_2
		}
		return Overloaded__SWIG_1(a[0].(int))
	}
check_2:
	if argc == 1 {
		return Overloaded__SWIG_2(a[0].(string))
	}
	panic("No match for overloaded function call")
}

var _wrap_boolfunction unsafe.Pointer

func Boolfunction(arg1 bool) (_swig_ret string) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_boolfunction, _swig_p)
	return
}
var _wrap_intfunction unsafe.Pointer

func Intfunction(arg1 int) (_swig_ret string) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_intfunction, _swig_p)
	return
}
var _wrap_overloaded_ref__SWIG_0 unsafe.Pointer

func Overloaded_ref__SWIG_0(arg1 bool) (_swig_ret string) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_overloaded_ref__SWIG_0, _swig_p)
	return
}
var _wrap_overloaded_ref__SWIG_1 unsafe.Pointer

func Overloaded_ref__SWIG_1(arg1 int) (_swig_ret string) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_overloaded_ref__SWIG_1, _swig_p)
	return
}
var _wrap_overloaded_ref__SWIG_2 unsafe.Pointer

func Overloaded_ref__SWIG_2(arg1 string) (_swig_ret string) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_overloaded_ref__SWIG_2, _swig_p)
	return
}
func Overloaded_ref(a ...interface{}) string {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(bool); !ok {
			goto check_1
		}
		return Overloaded_ref__SWIG_0(a[0].(bool))
	}
check_1:
	if argc == 1 {
		if _, ok := a[0].(int); !ok {
			goto check_2
		}
		return Overloaded_ref__SWIG_1(a[0].(int))
	}
check_2:
	if argc == 1 {
		return Overloaded_ref__SWIG_2(a[0].(string))
	}
	panic("No match for overloaded function call")
}

var _wrap_boolfunction_ref unsafe.Pointer

func Boolfunction_ref(arg1 bool) (_swig_ret string) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_boolfunction_ref, _swig_p)
	return
}
var _wrap_intfunction_ref unsafe.Pointer

func Intfunction_ref(arg1 int) (_swig_ret string) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_intfunction_ref, _swig_p)
	return
}


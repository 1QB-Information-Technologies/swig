/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../smart_pointer_template_defaults_overload.i

package smart_pointer_template_defaults_overload

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrStringDoubleMap uintptr

func (p SwigcptrStringDoubleMap) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrStringDoubleMap) SwigIsStringDoubleMap() {
}

var _wrap_new_StringDoubleMap__SWIG_0 unsafe.Pointer

func _swig_wrap_new_StringDoubleMap__SWIG_0() (base SwigcptrStringDoubleMap) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_StringDoubleMap__SWIG_0, _swig_p)
	return
}

func NewStringDoubleMap__SWIG_0() (_swig_ret StringDoubleMap) {
	return _swig_wrap_new_StringDoubleMap__SWIG_0()
}

var _wrap_new_StringDoubleMap__SWIG_1 unsafe.Pointer

func _swig_wrap_new_StringDoubleMap__SWIG_1(base uintptr) (_ SwigcptrStringDoubleMap) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_StringDoubleMap__SWIG_1, _swig_p)
	return
}

func NewStringDoubleMap__SWIG_1(arg1 StringDoubleMap) (_swig_ret StringDoubleMap) {
	return _swig_wrap_new_StringDoubleMap__SWIG_1(arg1.Swigcptr())
}

func NewStringDoubleMap(a ...interface{}) StringDoubleMap {
	argc := len(a)
	if argc == 0 {
		return NewStringDoubleMap__SWIG_0()
	}
	if argc == 1 {
		return NewStringDoubleMap__SWIG_1(a[0].(StringDoubleMap))
	}
	panic("No match for overloaded function call")
}

var _wrap_StringDoubleMap_size unsafe.Pointer

func _swig_wrap_StringDoubleMap_size(base SwigcptrStringDoubleMap) (_ uint) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringDoubleMap_size, _swig_p)
	return
}

func (arg1 SwigcptrStringDoubleMap) Size() (_swig_ret uint) {
	return _swig_wrap_StringDoubleMap_size(arg1)
}

var _wrap_StringDoubleMap_empty unsafe.Pointer

func _swig_wrap_StringDoubleMap_empty(base SwigcptrStringDoubleMap) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringDoubleMap_empty, _swig_p)
	return
}

func (arg1 SwigcptrStringDoubleMap) Empty() (_swig_ret bool) {
	return _swig_wrap_StringDoubleMap_empty(arg1)
}

var _wrap_StringDoubleMap_clear unsafe.Pointer

func _swig_wrap_StringDoubleMap_clear(base SwigcptrStringDoubleMap) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringDoubleMap_clear, _swig_p)
	return
}

func (arg1 SwigcptrStringDoubleMap) Clear() {
	_swig_wrap_StringDoubleMap_clear(arg1)
}

var _wrap_StringDoubleMap_get unsafe.Pointer

func _swig_wrap_StringDoubleMap_get(base SwigcptrStringDoubleMap, _ string) (_ float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringDoubleMap_get, _swig_p)
	return
}

func (arg1 SwigcptrStringDoubleMap) Get(arg2 string) (_swig_ret float64) {
	return _swig_wrap_StringDoubleMap_get(arg1, arg2)
}

var _wrap_StringDoubleMap_set unsafe.Pointer

func _swig_wrap_StringDoubleMap_set(base SwigcptrStringDoubleMap, _ string, _ float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringDoubleMap_set, _swig_p)
	return
}

func (arg1 SwigcptrStringDoubleMap) Set(arg2 string, arg3 float64) {
	_swig_wrap_StringDoubleMap_set(arg1, arg2, arg3)
}

var _wrap_StringDoubleMap_del unsafe.Pointer

func _swig_wrap_StringDoubleMap_del(base SwigcptrStringDoubleMap, _ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringDoubleMap_del, _swig_p)
	return
}

func (arg1 SwigcptrStringDoubleMap) Del(arg2 string) {
	_swig_wrap_StringDoubleMap_del(arg1, arg2)
}

var _wrap_StringDoubleMap_has_key unsafe.Pointer

func _swig_wrap_StringDoubleMap_has_key(base SwigcptrStringDoubleMap, _ string) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringDoubleMap_has_key, _swig_p)
	return
}

func (arg1 SwigcptrStringDoubleMap) Has_key(arg2 string) (_swig_ret bool) {
	return _swig_wrap_StringDoubleMap_has_key(arg1, arg2)
}

var _wrap_delete_StringDoubleMap unsafe.Pointer

func _swig_wrap_delete_StringDoubleMap(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_StringDoubleMap, _swig_p)
	return
}

func DeleteStringDoubleMap(arg1 StringDoubleMap) {
	_swig_wrap_delete_StringDoubleMap(arg1.Swigcptr())
}

type StringDoubleMap interface {
	Swigcptr() uintptr
	SwigIsStringDoubleMap()
	Size() (_swig_ret uint)
	Empty() (_swig_ret bool)
	Clear()
	Get(arg2 string) (_swig_ret float64)
	Set(arg2 string, arg3 float64)
	Del(arg2 string)
	Has_key(arg2 string) (_swig_ret bool)
}

type SwigcptrWrappedMap uintptr

func (p SwigcptrWrappedMap) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrWrappedMap) SwigIsWrappedMap() {
}

var _wrap_new_WrappedMap unsafe.Pointer

func _swig_wrap_new_WrappedMap(base uintptr) (_ SwigcptrWrappedMap) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_WrappedMap, _swig_p)
	return
}

func NewWrappedMap(arg1 StringDoubleMap) (_swig_ret WrappedMap) {
	return _swig_wrap_new_WrappedMap(arg1.Swigcptr())
}

var _wrap_WrappedMap___deref____SWIG_0 unsafe.Pointer

func _swig_wrap_WrappedMap___deref____SWIG_0(base SwigcptrWrappedMap) (_ SwigcptrStringDoubleMap) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrappedMap___deref____SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrWrappedMap) X__deref____SWIG_0() (_swig_ret StringDoubleMap) {
	return _swig_wrap_WrappedMap___deref____SWIG_0(arg1)
}

var _wrap_WrappedMap___deref____SWIG_1 unsafe.Pointer

func _swig_wrap_WrappedMap___deref____SWIG_1(base SwigcptrWrappedMap) (_ SwigcptrStringDoubleMap) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrappedMap___deref____SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrWrappedMap) X__deref____SWIG_1() (_swig_ret StringDoubleMap) {
	return _swig_wrap_WrappedMap___deref____SWIG_1(arg1)
}

func (p SwigcptrWrappedMap) X__deref__(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 0 {
		return p.X__deref____SWIG_0()
	}
	if argc == 0 {
		return p.X__deref____SWIG_1()
	}
	panic("No match for overloaded function call")
}

var _wrap_delete_WrappedMap unsafe.Pointer

func _swig_wrap_delete_WrappedMap(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_WrappedMap, _swig_p)
	return
}

func DeleteWrappedMap(arg1 WrappedMap) {
	_swig_wrap_delete_WrappedMap(arg1.Swigcptr())
}

var _wrap_WrappedMap_size unsafe.Pointer

func _swig_wrap_WrappedMap_size(base SwigcptrWrappedMap) (_ uint) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrappedMap_size, _swig_p)
	return
}

func (arg1 SwigcptrWrappedMap) Size() (_swig_ret uint) {
	return _swig_wrap_WrappedMap_size(arg1)
}

var _wrap_WrappedMap_empty unsafe.Pointer

func _swig_wrap_WrappedMap_empty(base SwigcptrWrappedMap) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrappedMap_empty, _swig_p)
	return
}

func (arg1 SwigcptrWrappedMap) Empty() (_swig_ret bool) {
	return _swig_wrap_WrappedMap_empty(arg1)
}

var _wrap_WrappedMap_clear unsafe.Pointer

func _swig_wrap_WrappedMap_clear(base SwigcptrWrappedMap) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrappedMap_clear, _swig_p)
	return
}

func (arg1 SwigcptrWrappedMap) Clear() {
	_swig_wrap_WrappedMap_clear(arg1)
}

var _wrap_WrappedMap_get unsafe.Pointer

func _swig_wrap_WrappedMap_get(base SwigcptrWrappedMap, _ string) (_ float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrappedMap_get, _swig_p)
	return
}

func (arg1 SwigcptrWrappedMap) Get(arg2 string) (_swig_ret float64) {
	return _swig_wrap_WrappedMap_get(arg1, arg2)
}

var _wrap_WrappedMap_set unsafe.Pointer

func _swig_wrap_WrappedMap_set(base SwigcptrWrappedMap, _ string, _ float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrappedMap_set, _swig_p)
	return
}

func (arg1 SwigcptrWrappedMap) Set(arg2 string, arg3 float64) {
	_swig_wrap_WrappedMap_set(arg1, arg2, arg3)
}

var _wrap_WrappedMap_del unsafe.Pointer

func _swig_wrap_WrappedMap_del(base SwigcptrWrappedMap, _ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrappedMap_del, _swig_p)
	return
}

func (arg1 SwigcptrWrappedMap) Del(arg2 string) {
	_swig_wrap_WrappedMap_del(arg1, arg2)
}

var _wrap_WrappedMap_has_key unsafe.Pointer

func _swig_wrap_WrappedMap_has_key(base SwigcptrWrappedMap, _ string) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrappedMap_has_key, _swig_p)
	return
}

func (arg1 SwigcptrWrappedMap) Has_key(arg2 string) (_swig_ret bool) {
	return _swig_wrap_WrappedMap_has_key(arg1, arg2)
}

type WrappedMap interface {
	Swigcptr() uintptr
	SwigIsWrappedMap()
	X__deref__(a ...interface{}) interface{}
	Size() (_swig_ret uint)
	Empty() (_swig_ret bool)
	Clear()
	Get(arg2 string) (_swig_ret float64)
	Set(arg2 string, arg3 float64)
	Del(arg2 string)
	Has_key(arg2 string) (_swig_ret bool)
}

type SwigcptrContainerInt uintptr

func (p SwigcptrContainerInt) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrContainerInt) SwigIsContainerInt() {
}

var _wrap_ContainerInt_rubout__SWIG_0 unsafe.Pointer

func _swig_wrap_ContainerInt_rubout__SWIG_0(base SwigcptrContainerInt) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ContainerInt_rubout__SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrContainerInt) Rubout__SWIG_0() (_swig_ret int) {
	return _swig_wrap_ContainerInt_rubout__SWIG_0(arg1)
}

var _wrap_ContainerInt_rubout__SWIG_1 unsafe.Pointer

func _swig_wrap_ContainerInt_rubout__SWIG_1(base SwigcptrContainerInt, _ float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ContainerInt_rubout__SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrContainerInt) Rubout__SWIG_1(arg2 float64) {
	_swig_wrap_ContainerInt_rubout__SWIG_1(arg1, arg2)
}

var _wrap_ContainerInt_factory__SWIG_0 unsafe.Pointer

func _swig_wrap_ContainerInt_factory__SWIG_0() (base SwigcptrContainerInt) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ContainerInt_factory__SWIG_0, _swig_p)
	return
}

func ContainerIntFactory__SWIG_0() (_swig_ret ContainerInt) {
	return _swig_wrap_ContainerInt_factory__SWIG_0()
}

var _wrap_ContainerInt_factory__SWIG_1 unsafe.Pointer

func _swig_wrap_ContainerInt_factory__SWIG_1(base bool) (_ SwigcptrContainerInt) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ContainerInt_factory__SWIG_1, _swig_p)
	return
}

func ContainerIntFactory__SWIG_1(arg1 bool) (_swig_ret ContainerInt) {
	return _swig_wrap_ContainerInt_factory__SWIG_1(arg1)
}

func ContainerIntFactory(a ...interface{}) ContainerInt {
	argc := len(a)
	if argc == 0 {
		return ContainerIntFactory__SWIG_0()
	}
	if argc == 1 {
		return ContainerIntFactory__SWIG_1(a[0].(bool))
	}
	panic("No match for overloaded function call")
}

var _wrap_ContainerInt_staticstuff unsafe.Pointer

func _swig_wrap_ContainerInt_staticstuff(base bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ContainerInt_staticstuff, _swig_p)
	return
}

func ContainerIntStaticstuff(arg1 bool) {
	_swig_wrap_ContainerInt_staticstuff(arg1)
}

var _wrap_ContainerInt_rubout__SWIG_2 unsafe.Pointer

func _swig_wrap_ContainerInt_rubout__SWIG_2(base SwigcptrContainerInt, _ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ContainerInt_rubout__SWIG_2, _swig_p)
	return
}

func (arg1 SwigcptrContainerInt) Rubout__SWIG_2(arg2 bool) {
	_swig_wrap_ContainerInt_rubout__SWIG_2(arg1, arg2)
}

var _wrap_ContainerInt_rubout__SWIG_3 unsafe.Pointer

func _swig_wrap_ContainerInt_rubout__SWIG_3(base SwigcptrContainerInt, _ int, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ContainerInt_rubout__SWIG_3, _swig_p)
	return
}

func (arg1 SwigcptrContainerInt) Rubout__SWIG_3(arg2 int, arg3 int) {
	_swig_wrap_ContainerInt_rubout__SWIG_3(arg1, arg2, arg3)
}

var _wrap_ContainerInt_rubout__SWIG_4 unsafe.Pointer

func _swig_wrap_ContainerInt_rubout__SWIG_4(base SwigcptrContainerInt, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ContainerInt_rubout__SWIG_4, _swig_p)
	return
}

func (arg1 SwigcptrContainerInt) Rubout__SWIG_4(arg2 int) {
	_swig_wrap_ContainerInt_rubout__SWIG_4(arg1, arg2)
}

func (p SwigcptrContainerInt) Rubout(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 0 {
		return p.Rubout__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(bool); !ok {
			goto check_2
		}
		p.Rubout__SWIG_2(a[0].(bool))
		return 0
	}
check_2:
	if argc == 1 {
		if _, ok := a[0].(int); !ok {
			goto check_3
		}
		p.Rubout__SWIG_4(a[0].(int))
		return 0
	}
check_3:
	if argc == 1 {
		p.Rubout__SWIG_1(a[0].(float64))
		return 0
	}
	if argc == 2 {
		p.Rubout__SWIG_3(a[0].(int), a[1].(int))
		return 0
	}
	panic("No match for overloaded function call")
}

var _wrap_new_ContainerInt unsafe.Pointer

func _swig_wrap_new_ContainerInt() (base SwigcptrContainerInt) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_ContainerInt, _swig_p)
	return
}

func NewContainerInt() (_swig_ret ContainerInt) {
	return _swig_wrap_new_ContainerInt()
}

var _wrap_delete_ContainerInt unsafe.Pointer

func _swig_wrap_delete_ContainerInt(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_ContainerInt, _swig_p)
	return
}

func DeleteContainerInt(arg1 ContainerInt) {
	_swig_wrap_delete_ContainerInt(arg1.Swigcptr())
}

type ContainerInt interface {
	Swigcptr() uintptr
	SwigIsContainerInt()
	Rubout(a ...interface{}) interface{}
}

type SwigcptrWrapContainerInt uintptr

func (p SwigcptrWrapContainerInt) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrWrapContainerInt) SwigIsWrapContainerInt() {
}

var _wrap_new_WrapContainerInt unsafe.Pointer

func _swig_wrap_new_WrapContainerInt(base uintptr) (_ SwigcptrWrapContainerInt) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_WrapContainerInt, _swig_p)
	return
}

func NewWrapContainerInt(arg1 ContainerInt) (_swig_ret WrapContainerInt) {
	return _swig_wrap_new_WrapContainerInt(arg1.Swigcptr())
}

var _wrap_WrapContainerInt___deref____SWIG_0 unsafe.Pointer

func _swig_wrap_WrapContainerInt___deref____SWIG_0(base SwigcptrWrapContainerInt) (_ SwigcptrContainerInt) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrapContainerInt___deref____SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrWrapContainerInt) X__deref____SWIG_0() (_swig_ret ContainerInt) {
	return _swig_wrap_WrapContainerInt___deref____SWIG_0(arg1)
}

var _wrap_WrapContainerInt___deref____SWIG_1 unsafe.Pointer

func _swig_wrap_WrapContainerInt___deref____SWIG_1(base SwigcptrWrapContainerInt) (_ SwigcptrContainerInt) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrapContainerInt___deref____SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrWrapContainerInt) X__deref____SWIG_1() (_swig_ret ContainerInt) {
	return _swig_wrap_WrapContainerInt___deref____SWIG_1(arg1)
}

func (p SwigcptrWrapContainerInt) X__deref__(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 0 {
		return p.X__deref____SWIG_0()
	}
	if argc == 0 {
		return p.X__deref____SWIG_1()
	}
	panic("No match for overloaded function call")
}

var _wrap_delete_WrapContainerInt unsafe.Pointer

func _swig_wrap_delete_WrapContainerInt(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_WrapContainerInt, _swig_p)
	return
}

func DeleteWrapContainerInt(arg1 WrapContainerInt) {
	_swig_wrap_delete_WrapContainerInt(arg1.Swigcptr())
}

var _wrap_WrapContainerInt_rubout__SWIG_0 unsafe.Pointer

func _swig_wrap_WrapContainerInt_rubout__SWIG_0(base SwigcptrWrapContainerInt) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrapContainerInt_rubout__SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrWrapContainerInt) Rubout__SWIG_0() (_swig_ret int) {
	return _swig_wrap_WrapContainerInt_rubout__SWIG_0(arg1)
}

var _wrap_WrapContainerInt_rubout__SWIG_1 unsafe.Pointer

func _swig_wrap_WrapContainerInt_rubout__SWIG_1(base SwigcptrWrapContainerInt, _ float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrapContainerInt_rubout__SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrWrapContainerInt) Rubout__SWIG_1(arg2 float64) {
	_swig_wrap_WrapContainerInt_rubout__SWIG_1(arg1, arg2)
}

var _wrap_WrapContainerInt_rubout__SWIG_2 unsafe.Pointer

func _swig_wrap_WrapContainerInt_rubout__SWIG_2(base SwigcptrWrapContainerInt, _ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrapContainerInt_rubout__SWIG_2, _swig_p)
	return
}

func (arg1 SwigcptrWrapContainerInt) Rubout__SWIG_2(arg2 bool) {
	_swig_wrap_WrapContainerInt_rubout__SWIG_2(arg1, arg2)
}

var _wrap_WrapContainerInt_rubout__SWIG_3 unsafe.Pointer

func _swig_wrap_WrapContainerInt_rubout__SWIG_3(base SwigcptrWrapContainerInt, _ int, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrapContainerInt_rubout__SWIG_3, _swig_p)
	return
}

func (arg1 SwigcptrWrapContainerInt) Rubout__SWIG_3(arg2 int, arg3 int) {
	_swig_wrap_WrapContainerInt_rubout__SWIG_3(arg1, arg2, arg3)
}

var _wrap_WrapContainerInt_rubout__SWIG_4 unsafe.Pointer

func _swig_wrap_WrapContainerInt_rubout__SWIG_4(base SwigcptrWrapContainerInt, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrapContainerInt_rubout__SWIG_4, _swig_p)
	return
}

func (arg1 SwigcptrWrapContainerInt) Rubout__SWIG_4(arg2 int) {
	_swig_wrap_WrapContainerInt_rubout__SWIG_4(arg1, arg2)
}

func (p SwigcptrWrapContainerInt) Rubout(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 0 {
		return p.Rubout__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(bool); !ok {
			goto check_2
		}
		p.Rubout__SWIG_2(a[0].(bool))
		return 0
	}
check_2:
	if argc == 1 {
		if _, ok := a[0].(int); !ok {
			goto check_3
		}
		p.Rubout__SWIG_4(a[0].(int))
		return 0
	}
check_3:
	if argc == 1 {
		p.Rubout__SWIG_1(a[0].(float64))
		return 0
	}
	if argc == 2 {
		p.Rubout__SWIG_3(a[0].(int), a[1].(int))
		return 0
	}
	panic("No match for overloaded function call")
}

var _wrap_WrapContainerInt_factory__SWIG_0 unsafe.Pointer

func _swig_wrap_WrapContainerInt_factory__SWIG_0(base SwigcptrWrapContainerInt) (_ SwigcptrContainerInt) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrapContainerInt_factory__SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrWrapContainerInt) Factory__SWIG_0() (_swig_ret ContainerInt) {
	return _swig_wrap_WrapContainerInt_factory__SWIG_0(arg1)
}

var _wrap_WrapContainerInt_factory__SWIG_1 unsafe.Pointer

func _swig_wrap_WrapContainerInt_factory__SWIG_1(base SwigcptrWrapContainerInt, _ bool) (_ SwigcptrContainerInt) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrapContainerInt_factory__SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrWrapContainerInt) Factory__SWIG_1(arg2 bool) (_swig_ret ContainerInt) {
	return _swig_wrap_WrapContainerInt_factory__SWIG_1(arg1, arg2)
}

func (p SwigcptrWrapContainerInt) Factory(a ...interface{}) ContainerInt {
	argc := len(a)
	if argc == 0 {
		return p.Factory__SWIG_0()
	}
	if argc == 1 {
		return p.Factory__SWIG_1(a[0].(bool))
	}
	panic("No match for overloaded function call")
}

var _wrap_WrapContainerInt_staticstuff unsafe.Pointer

func _swig_wrap_WrapContainerInt_staticstuff(base SwigcptrWrapContainerInt, _ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_WrapContainerInt_staticstuff, _swig_p)
	return
}

func (arg1 SwigcptrWrapContainerInt) Staticstuff(arg2 bool) {
	_swig_wrap_WrapContainerInt_staticstuff(arg1, arg2)
}

type WrapContainerInt interface {
	Swigcptr() uintptr
	SwigIsWrapContainerInt()
	X__deref__(a ...interface{}) interface{}
	Rubout(a ...interface{}) interface{}
	Factory(a ...interface{}) ContainerInt
	Staticstuff(arg2 bool)
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../operator_overload.i

package operator_overload

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrOp uintptr

func (p SwigcptrOp) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrOp) SwigIsOp() {
}

var _wrap_Op_i_set unsafe.Pointer

func _swig_wrap_Op_i_set(base SwigcptrOp, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_i_set, _swig_p)
	return
}

func (arg1 SwigcptrOp) SetI(arg2 int) {
	_swig_wrap_Op_i_set(arg1, arg2)
}

var _wrap_Op_i_get unsafe.Pointer

func _swig_wrap_Op_i_get(base SwigcptrOp) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_i_get, _swig_p)
	return
}

func (arg1 SwigcptrOp) GetI() (_swig_ret int) {
	return _swig_wrap_Op_i_get(arg1)
}

var _wrap_new_Op__SWIG_0 unsafe.Pointer

func _swig_wrap_new_Op__SWIG_0(base int) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Op__SWIG_0, _swig_p)
	return
}

func NewOp__SWIG_0(arg1 int) (_swig_ret Op) {
	return _swig_wrap_new_Op__SWIG_0(arg1)
}

var _wrap_new_Op__SWIG_1 unsafe.Pointer

func _swig_wrap_new_Op__SWIG_1() (base SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Op__SWIG_1, _swig_p)
	return
}

func NewOp__SWIG_1() (_swig_ret Op) {
	return _swig_wrap_new_Op__SWIG_1()
}

var _wrap_new_Op__SWIG_2 unsafe.Pointer

func _swig_wrap_new_Op__SWIG_2(base uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Op__SWIG_2, _swig_p)
	return
}

func NewOp__SWIG_2(arg1 Op) (_swig_ret Op) {
	return _swig_wrap_new_Op__SWIG_2(arg1.Swigcptr())
}

func NewOp(a ...interface{}) Op {
	argc := len(a)
	if argc == 0 {
		return NewOp__SWIG_1()
	}
	if argc == 1 {
		if _, ok := a[0].(Op); !ok {
			goto check_2
		}
		return NewOp__SWIG_2(a[0].(Op))
	}
check_2:
	if argc == 1 {
		return NewOp__SWIG_0(a[0].(int))
	}
	panic("No match for overloaded function call")
}

var _wrap_delete_Op unsafe.Pointer

func _swig_wrap_delete_Op(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Op, _swig_p)
	return
}

func DeleteOp(arg1 Op) {
	_swig_wrap_delete_Op(arg1.Swigcptr())
}

var _wrap_And unsafe.Pointer

func _swig_wrap_And(base uintptr, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_And, _swig_p)
	return
}

func And(arg1 Op, arg2 Op) (_swig_ret Op) {
	return _swig_wrap_And(arg1.Swigcptr(), arg2.Swigcptr())
}

var _wrap_Or unsafe.Pointer

func _swig_wrap_Or(base uintptr, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Or, _swig_p)
	return
}

func Or(arg1 Op, arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Or(arg1.Swigcptr(), arg2.Swigcptr())
}

var _wrap_Op_Equal unsafe.Pointer

func _swig_wrap_Op_Equal(base SwigcptrOp, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_Equal, _swig_p)
	return
}

func (arg1 SwigcptrOp) Equal(arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Op_Equal(arg1, arg2.Swigcptr())
}

var _wrap_Op_PlusEqual unsafe.Pointer

func _swig_wrap_Op_PlusEqual(base SwigcptrOp, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_PlusEqual, _swig_p)
	return
}

func (arg1 SwigcptrOp) PlusEqual(arg2 Op) {
	_swig_wrap_Op_PlusEqual(arg1, arg2.Swigcptr())
}

var _wrap_Op_MinusEqual unsafe.Pointer

func _swig_wrap_Op_MinusEqual(base SwigcptrOp, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_MinusEqual, _swig_p)
	return
}

func (arg1 SwigcptrOp) MinusEqual(arg2 Op) {
	_swig_wrap_Op_MinusEqual(arg1, arg2.Swigcptr())
}

var _wrap_Op_MultiplyEqual unsafe.Pointer

func _swig_wrap_Op_MultiplyEqual(base SwigcptrOp, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_MultiplyEqual, _swig_p)
	return
}

func (arg1 SwigcptrOp) MultiplyEqual(arg2 Op) {
	_swig_wrap_Op_MultiplyEqual(arg1, arg2.Swigcptr())
}

var _wrap_Op_DivideEqual unsafe.Pointer

func _swig_wrap_Op_DivideEqual(base SwigcptrOp, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_DivideEqual, _swig_p)
	return
}

func (arg1 SwigcptrOp) DivideEqual(arg2 Op) {
	_swig_wrap_Op_DivideEqual(arg1, arg2.Swigcptr())
}

var _wrap_Op_PercentEqual unsafe.Pointer

func _swig_wrap_Op_PercentEqual(base SwigcptrOp, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_PercentEqual, _swig_p)
	return
}

func (arg1 SwigcptrOp) PercentEqual(arg2 Op) {
	_swig_wrap_Op_PercentEqual(arg1, arg2.Swigcptr())
}

var _wrap_Plus unsafe.Pointer

func _swig_wrap_Plus(base uintptr, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Plus, _swig_p)
	return
}

func Plus(arg1 Op, arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Plus(arg1.Swigcptr(), arg2.Swigcptr())
}

var _wrap_Minus unsafe.Pointer

func _swig_wrap_Minus(base uintptr, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Minus, _swig_p)
	return
}

func Minus(arg1 Op, arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Minus(arg1.Swigcptr(), arg2.Swigcptr())
}

var _wrap_Multiply unsafe.Pointer

func _swig_wrap_Multiply(base uintptr, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Multiply, _swig_p)
	return
}

func Multiply(arg1 Op, arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Multiply(arg1.Swigcptr(), arg2.Swigcptr())
}

var _wrap_Divide unsafe.Pointer

func _swig_wrap_Divide(base uintptr, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Divide, _swig_p)
	return
}

func Divide(arg1 Op, arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Divide(arg1.Swigcptr(), arg2.Swigcptr())
}

var _wrap_Percent unsafe.Pointer

func _swig_wrap_Percent(base uintptr, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Percent, _swig_p)
	return
}

func Percent(arg1 Op, arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Percent(arg1.Swigcptr(), arg2.Swigcptr())
}

var _wrap_Op_Minus__SWIG_0 unsafe.Pointer

func _swig_wrap_Op_Minus__SWIG_0(base SwigcptrOp) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_Minus__SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrOp) Minus__SWIG_0() (_swig_ret Op) {
	return _swig_wrap_Op_Minus__SWIG_0(arg1)
}

var _wrap_Op_Not unsafe.Pointer

func _swig_wrap_Op_Not(base SwigcptrOp) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_Not, _swig_p)
	return
}

func (arg1 SwigcptrOp) Not() (_swig_ret bool) {
	return _swig_wrap_Op_Not(arg1)
}

var _wrap_Op_IndexIntoConst unsafe.Pointer

func _swig_wrap_Op_IndexIntoConst(base SwigcptrOp, _ uint) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_IndexIntoConst, _swig_p)
	return
}

func (arg1 SwigcptrOp) IndexIntoConst(arg2 uint) (_swig_ret int) {
	return _swig_wrap_Op_IndexIntoConst(arg1, arg2)
}

var _wrap_Op_IndexInto unsafe.Pointer

func _swig_wrap_Op_IndexInto(base SwigcptrOp, _ uint) (_ *int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_IndexInto, _swig_p)
	return
}

func (arg1 SwigcptrOp) IndexInto(arg2 uint) (_swig_ret *int) {
	return _swig_wrap_Op_IndexInto(arg1, arg2)
}

var _wrap_Op_Functor__SWIG_0 unsafe.Pointer

func _swig_wrap_Op_Functor__SWIG_0(base SwigcptrOp, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_Functor__SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrOp) Functor__SWIG_0(arg2 int) (_swig_ret int) {
	return _swig_wrap_Op_Functor__SWIG_0(arg1, arg2)
}

var _wrap_Op_Functor__SWIG_1 unsafe.Pointer

func _swig_wrap_Op_Functor__SWIG_1(base SwigcptrOp) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_Functor__SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrOp) Functor__SWIG_1() (_swig_ret int) {
	return _swig_wrap_Op_Functor__SWIG_1(arg1)
}

var _wrap_Op_Functor__SWIG_2 unsafe.Pointer

func _swig_wrap_Op_Functor__SWIG_2(base SwigcptrOp, _ int, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_Functor__SWIG_2, _swig_p)
	return
}

func (arg1 SwigcptrOp) Functor__SWIG_2(arg2 int, arg3 int) (_swig_ret int) {
	return _swig_wrap_Op_Functor__SWIG_2(arg1, arg2, arg3)
}

func (p SwigcptrOp) Functor(a ...interface{}) int {
	argc := len(a)
	if argc == 0 {
		return p.Functor__SWIG_1()
	}
	if argc == 1 {
		return p.Functor__SWIG_0(a[0].(int))
	}
	if argc == 2 {
		return p.Functor__SWIG_2(a[0].(int), a[1].(int))
	}
	panic("No match for overloaded function call")
}

var _wrap_Op_PlusPlusPrefix unsafe.Pointer

func _swig_wrap_Op_PlusPlusPrefix(base SwigcptrOp) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_PlusPlusPrefix, _swig_p)
	return
}

func (arg1 SwigcptrOp) PlusPlusPrefix() (_swig_ret Op) {
	return _swig_wrap_Op_PlusPlusPrefix(arg1)
}

var _wrap_Op_PlusPlusPostfix unsafe.Pointer

func _swig_wrap_Op_PlusPlusPostfix(base SwigcptrOp, _ int) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_PlusPlusPostfix, _swig_p)
	return
}

func (arg1 SwigcptrOp) PlusPlusPostfix(arg2 int) (_swig_ret Op) {
	return _swig_wrap_Op_PlusPlusPostfix(arg1, arg2)
}

var _wrap_Op_MinusMinusPrefix unsafe.Pointer

func _swig_wrap_Op_MinusMinusPrefix(base SwigcptrOp) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_MinusMinusPrefix, _swig_p)
	return
}

func (arg1 SwigcptrOp) MinusMinusPrefix() (_swig_ret Op) {
	return _swig_wrap_Op_MinusMinusPrefix(arg1)
}

var _wrap_Op_MinusMinusPostfix unsafe.Pointer

func _swig_wrap_Op_MinusMinusPostfix(base SwigcptrOp, _ int) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_MinusMinusPostfix, _swig_p)
	return
}

func (arg1 SwigcptrOp) MinusMinusPostfix(arg2 int) (_swig_ret Op) {
	return _swig_wrap_Op_MinusMinusPostfix(arg1, arg2)
}

var _wrap_Op_DoubleCast unsafe.Pointer

func _swig_wrap_Op_DoubleCast(base SwigcptrOp) (_ float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_DoubleCast, _swig_p)
	return
}

func (arg1 SwigcptrOp) DoubleCast() (_swig_ret float64) {
	return _swig_wrap_Op_DoubleCast(arg1)
}

var _wrap_Op_IntCast unsafe.Pointer

func _swig_wrap_Op_IntCast(base SwigcptrOp) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_IntCast, _swig_p)
	return
}

func (arg1 SwigcptrOp) IntCast() (_swig_ret int) {
	return _swig_wrap_Op_IntCast(arg1)
}

var _wrap_Op_sanity_check unsafe.Pointer

func _swig_wrap_Op_sanity_check() {
	var _swig_p uintptr
	_cgo_runtime_cgocall(_wrap_Op_sanity_check, _swig_p)
	return
}

func OpSanity_check() {
	_swig_wrap_Op_sanity_check()
}

var _wrap_Op_And unsafe.Pointer

func _swig_wrap_Op_And(base SwigcptrOp, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_And, _swig_p)
	return
}

func (arg1 SwigcptrOp) And(arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Op_And(arg1, arg2.Swigcptr())
}

var _wrap_Op_Or unsafe.Pointer

func _swig_wrap_Op_Or(base SwigcptrOp, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_Or, _swig_p)
	return
}

func (arg1 SwigcptrOp) Or(arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Op_Or(arg1, arg2.Swigcptr())
}

var _wrap_Op_Plus unsafe.Pointer

func _swig_wrap_Op_Plus(base SwigcptrOp, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_Plus, _swig_p)
	return
}

func (arg1 SwigcptrOp) Plus(arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Op_Plus(arg1, arg2.Swigcptr())
}

var _wrap_Op_Minus__SWIG_1 unsafe.Pointer

func _swig_wrap_Op_Minus__SWIG_1(base SwigcptrOp, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_Minus__SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrOp) Minus__SWIG_1(arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Op_Minus__SWIG_1(arg1, arg2.Swigcptr())
}

func (p SwigcptrOp) Minus(a ...interface{}) Op {
	argc := len(a)
	if argc == 0 {
		return p.Minus__SWIG_0()
	}
	if argc == 1 {
		return p.Minus__SWIG_1(a[0].(Op))
	}
	panic("No match for overloaded function call")
}

var _wrap_Op_Multiply unsafe.Pointer

func _swig_wrap_Op_Multiply(base SwigcptrOp, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_Multiply, _swig_p)
	return
}

func (arg1 SwigcptrOp) Multiply(arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Op_Multiply(arg1, arg2.Swigcptr())
}

var _wrap_Op_Divide unsafe.Pointer

func _swig_wrap_Op_Divide(base SwigcptrOp, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_Divide, _swig_p)
	return
}

func (arg1 SwigcptrOp) Divide(arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Op_Divide(arg1, arg2.Swigcptr())
}

var _wrap_Op_Percent unsafe.Pointer

func _swig_wrap_Op_Percent(base SwigcptrOp, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_Percent, _swig_p)
	return
}

func (arg1 SwigcptrOp) Percent(arg2 Op) (_swig_ret Op) {
	return _swig_wrap_Op_Percent(arg1, arg2.Swigcptr())
}

var _wrap_Op_EqualEqual unsafe.Pointer

func _swig_wrap_Op_EqualEqual(base SwigcptrOp, _ uintptr) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_EqualEqual, _swig_p)
	return
}

func (arg1 SwigcptrOp) EqualEqual(arg2 Op) (_swig_ret bool) {
	return _swig_wrap_Op_EqualEqual(arg1, arg2.Swigcptr())
}

var _wrap_Op_NotEqual unsafe.Pointer

func _swig_wrap_Op_NotEqual(base SwigcptrOp, _ uintptr) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_NotEqual, _swig_p)
	return
}

func (arg1 SwigcptrOp) NotEqual(arg2 Op) (_swig_ret bool) {
	return _swig_wrap_Op_NotEqual(arg1, arg2.Swigcptr())
}

var _wrap_Op_LessThan unsafe.Pointer

func _swig_wrap_Op_LessThan(base SwigcptrOp, _ uintptr) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_LessThan, _swig_p)
	return
}

func (arg1 SwigcptrOp) LessThan(arg2 Op) (_swig_ret bool) {
	return _swig_wrap_Op_LessThan(arg1, arg2.Swigcptr())
}

var _wrap_Op_LessThanEqual unsafe.Pointer

func _swig_wrap_Op_LessThanEqual(base SwigcptrOp, _ uintptr) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_LessThanEqual, _swig_p)
	return
}

func (arg1 SwigcptrOp) LessThanEqual(arg2 Op) (_swig_ret bool) {
	return _swig_wrap_Op_LessThanEqual(arg1, arg2.Swigcptr())
}

var _wrap_Op_GreaterThan unsafe.Pointer

func _swig_wrap_Op_GreaterThan(base SwigcptrOp, _ uintptr) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_GreaterThan, _swig_p)
	return
}

func (arg1 SwigcptrOp) GreaterThan(arg2 Op) (_swig_ret bool) {
	return _swig_wrap_Op_GreaterThan(arg1, arg2.Swigcptr())
}

var _wrap_Op_GreaterThanEqual unsafe.Pointer

func _swig_wrap_Op_GreaterThanEqual(base SwigcptrOp, _ uintptr) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op_GreaterThanEqual, _swig_p)
	return
}

func (arg1 SwigcptrOp) GreaterThanEqual(arg2 Op) (_swig_ret bool) {
	return _swig_wrap_Op_GreaterThanEqual(arg1, arg2.Swigcptr())
}

var _wrap_Op___rsub__ unsafe.Pointer

func _swig_wrap_Op___rsub__(base SwigcptrOp, _ int) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op___rsub__, _swig_p)
	return
}

func (arg1 SwigcptrOp) X__rsub__(arg2 int) (_swig_ret Op) {
	return _swig_wrap_Op___rsub__(arg1, arg2)
}

var _wrap_Op___str__ unsafe.Pointer

func _swig_wrap_Op___str__(base SwigcptrOp) (_ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op___str__, _swig_p)
	return
}

func (arg1 SwigcptrOp) X__str__() (_swig_ret string) {
	return _swig_wrap_Op___str__(arg1)
}

var _wrap_Op___getitem__ unsafe.Pointer

func _swig_wrap_Op___getitem__(base SwigcptrOp, _ uint) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op___getitem__, _swig_p)
	return
}

func (arg1 SwigcptrOp) X__getitem__(arg2 uint) (_swig_ret int) {
	return _swig_wrap_Op___getitem__(arg1, arg2)
}

var _wrap_Op___setitem__ unsafe.Pointer

func _swig_wrap_Op___setitem__(base SwigcptrOp, _ uint, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Op___setitem__, _swig_p)
	return
}

func (arg1 SwigcptrOp) X__setitem__(arg2 uint, arg3 int) {
	_swig_wrap_Op___setitem__(arg1, arg2, arg3)
}

type Op interface {
	Swigcptr() uintptr
	SwigIsOp()
	SetI(arg2 int)
	GetI() (_swig_ret int)
	Equal(arg2 Op) (_swig_ret Op)
	PlusEqual(arg2 Op)
	MinusEqual(arg2 Op)
	MultiplyEqual(arg2 Op)
	DivideEqual(arg2 Op)
	PercentEqual(arg2 Op)
	Not() (_swig_ret bool)
	IndexIntoConst(arg2 uint) (_swig_ret int)
	IndexInto(arg2 uint) (_swig_ret *int)
	Functor(a ...interface{}) int
	PlusPlusPrefix() (_swig_ret Op)
	PlusPlusPostfix(arg2 int) (_swig_ret Op)
	MinusMinusPrefix() (_swig_ret Op)
	MinusMinusPostfix(arg2 int) (_swig_ret Op)
	DoubleCast() (_swig_ret float64)
	IntCast() (_swig_ret int)
	And(arg2 Op) (_swig_ret Op)
	Or(arg2 Op) (_swig_ret Op)
	Plus(arg2 Op) (_swig_ret Op)
	Minus(a ...interface{}) Op
	Multiply(arg2 Op) (_swig_ret Op)
	Divide(arg2 Op) (_swig_ret Op)
	Percent(arg2 Op) (_swig_ret Op)
	EqualEqual(arg2 Op) (_swig_ret bool)
	NotEqual(arg2 Op) (_swig_ret bool)
	LessThan(arg2 Op) (_swig_ret bool)
	LessThanEqual(arg2 Op) (_swig_ret bool)
	GreaterThan(arg2 Op) (_swig_ret bool)
	GreaterThanEqual(arg2 Op) (_swig_ret bool)
	X__rsub__(arg2 int) (_swig_ret Op)
	X__str__() (_swig_ret string)
	X__getitem__(arg2 uint) (_swig_ret int)
	X__setitem__(arg2 uint, arg3 int)
}

var _wrap_EqualEqual unsafe.Pointer

func _swig_wrap_EqualEqual(base uintptr, _ uintptr) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_EqualEqual, _swig_p)
	return
}

func EqualEqual(arg1 Op, arg2 Op) (_swig_ret bool) {
	return _swig_wrap_EqualEqual(arg1.Swigcptr(), arg2.Swigcptr())
}

var _wrap_NotEqual unsafe.Pointer

func _swig_wrap_NotEqual(base uintptr, _ uintptr) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_NotEqual, _swig_p)
	return
}

func NotEqual(arg1 Op, arg2 Op) (_swig_ret bool) {
	return _swig_wrap_NotEqual(arg1.Swigcptr(), arg2.Swigcptr())
}

var _wrap_LessThan unsafe.Pointer

func _swig_wrap_LessThan(base uintptr, _ uintptr) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_LessThan, _swig_p)
	return
}

func LessThan(arg1 Op, arg2 Op) (_swig_ret bool) {
	return _swig_wrap_LessThan(arg1.Swigcptr(), arg2.Swigcptr())
}

var _wrap_LessThanEqual unsafe.Pointer

func _swig_wrap_LessThanEqual(base uintptr, _ uintptr) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_LessThanEqual, _swig_p)
	return
}

func LessThanEqual(arg1 Op, arg2 Op) (_swig_ret bool) {
	return _swig_wrap_LessThanEqual(arg1.Swigcptr(), arg2.Swigcptr())
}

var _wrap_GreaterThan unsafe.Pointer

func _swig_wrap_GreaterThan(base uintptr, _ uintptr) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_GreaterThan, _swig_p)
	return
}

func GreaterThan(arg1 Op, arg2 Op) (_swig_ret bool) {
	return _swig_wrap_GreaterThan(arg1.Swigcptr(), arg2.Swigcptr())
}

var _wrap_GreaterThanEqual unsafe.Pointer

func _swig_wrap_GreaterThanEqual(base uintptr, _ uintptr) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_GreaterThanEqual, _swig_p)
	return
}

func GreaterThanEqual(arg1 Op, arg2 Op) (_swig_ret bool) {
	return _swig_wrap_GreaterThanEqual(arg1.Swigcptr(), arg2.Swigcptr())
}

type SwigcptrOpDerived uintptr

func (p SwigcptrOpDerived) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrOpDerived) SwigIsOpDerived() {
}

var _wrap_new_OpDerived__SWIG_0 unsafe.Pointer

func _swig_wrap_new_OpDerived__SWIG_0(base int) (_ SwigcptrOpDerived) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_OpDerived__SWIG_0, _swig_p)
	return
}

func NewOpDerived__SWIG_0(arg1 int) (_swig_ret OpDerived) {
	return _swig_wrap_new_OpDerived__SWIG_0(arg1)
}

var _wrap_new_OpDerived__SWIG_1 unsafe.Pointer

func _swig_wrap_new_OpDerived__SWIG_1() (base SwigcptrOpDerived) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_OpDerived__SWIG_1, _swig_p)
	return
}

func NewOpDerived__SWIG_1() (_swig_ret OpDerived) {
	return _swig_wrap_new_OpDerived__SWIG_1()
}

func NewOpDerived(a ...interface{}) OpDerived {
	argc := len(a)
	if argc == 0 {
		return NewOpDerived__SWIG_1()
	}
	if argc == 1 {
		return NewOpDerived__SWIG_0(a[0].(int))
	}
	panic("No match for overloaded function call")
}

var _wrap_OpDerived_IntCast unsafe.Pointer

func _swig_wrap_OpDerived_IntCast(base SwigcptrOpDerived) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_IntCast, _swig_p)
	return
}

func (arg1 SwigcptrOpDerived) IntCast() (_swig_ret int) {
	return _swig_wrap_OpDerived_IntCast(arg1)
}

var _wrap_delete_OpDerived unsafe.Pointer

func _swig_wrap_delete_OpDerived(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_OpDerived, _swig_p)
	return
}

func DeleteOpDerived(arg1 OpDerived) {
	_swig_wrap_delete_OpDerived(arg1.Swigcptr())
}

var _wrap_SetOpDerived_I unsafe.Pointer

func _swig_wrap_SetOpDerived_I(base SwigcptrOpDerived, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_SetOpDerived_I, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) SetI(arg1 int) {
	_swig_wrap_SetOpDerived_I(_swig_base, arg1)
}

var _wrap_GetOpDerived_I unsafe.Pointer

func _swig_wrap_GetOpDerived_I(base SwigcptrOpDerived) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_GetOpDerived_I, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) GetI() (_swig_ret int) {
	return _swig_wrap_GetOpDerived_I(_swig_base)
}

var _wrap_OpDerived_Equal unsafe.Pointer

func _swig_wrap_OpDerived_Equal(base SwigcptrOpDerived, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_Equal, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) Equal(arg1 Op) (_swig_ret Op) {
	return _swig_wrap_OpDerived_Equal(_swig_base, arg1.Swigcptr())
}

var _wrap_OpDerived_PlusEqual unsafe.Pointer

func _swig_wrap_OpDerived_PlusEqual(base SwigcptrOpDerived, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_PlusEqual, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) PlusEqual(arg1 Op) {
	_swig_wrap_OpDerived_PlusEqual(_swig_base, arg1.Swigcptr())
}

var _wrap_OpDerived_MinusEqual unsafe.Pointer

func _swig_wrap_OpDerived_MinusEqual(base SwigcptrOpDerived, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_MinusEqual, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) MinusEqual(arg1 Op) {
	_swig_wrap_OpDerived_MinusEqual(_swig_base, arg1.Swigcptr())
}

var _wrap_OpDerived_MultiplyEqual unsafe.Pointer

func _swig_wrap_OpDerived_MultiplyEqual(base SwigcptrOpDerived, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_MultiplyEqual, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) MultiplyEqual(arg1 Op) {
	_swig_wrap_OpDerived_MultiplyEqual(_swig_base, arg1.Swigcptr())
}

var _wrap_OpDerived_DivideEqual unsafe.Pointer

func _swig_wrap_OpDerived_DivideEqual(base SwigcptrOpDerived, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_DivideEqual, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) DivideEqual(arg1 Op) {
	_swig_wrap_OpDerived_DivideEqual(_swig_base, arg1.Swigcptr())
}

var _wrap_OpDerived_PercentEqual unsafe.Pointer

func _swig_wrap_OpDerived_PercentEqual(base SwigcptrOpDerived, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_PercentEqual, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) PercentEqual(arg1 Op) {
	_swig_wrap_OpDerived_PercentEqual(_swig_base, arg1.Swigcptr())
}

var _wrap_OpDerived_Minus__SWIG_0 unsafe.Pointer

func _swig_wrap_OpDerived_Minus__SWIG_0(base SwigcptrOpDerived) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_Minus__SWIG_0, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) Minus__SWIG_0() (_swig_ret Op) {
	return _swig_wrap_OpDerived_Minus__SWIG_0(_swig_base)
}

var _wrap_OpDerived_Minus__SWIG_1 unsafe.Pointer

func _swig_wrap_OpDerived_Minus__SWIG_1(base SwigcptrOpDerived, _ uintptr) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_Minus__SWIG_1, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) Minus__SWIG_1(arg1 Op) (_swig_ret Op) {
	return _swig_wrap_OpDerived_Minus__SWIG_1(_swig_base, arg1.Swigcptr())
}

func (p SwigcptrOpDerived) Minus(a ...interface{}) Op {
	argc := len(a)
	if argc == 0 {
		return p.Minus__SWIG_0()
	}
	if argc == 1 {
		return p.Minus__SWIG_1(a[0].(Op))
	}
	panic("No match for overloaded function call")
}

var _wrap_OpDerived_Not unsafe.Pointer

func _swig_wrap_OpDerived_Not(base SwigcptrOpDerived) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_Not, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) Not() (_swig_ret bool) {
	return _swig_wrap_OpDerived_Not(_swig_base)
}

var _wrap_OpDerived_IndexIntoConst unsafe.Pointer

func _swig_wrap_OpDerived_IndexIntoConst(base SwigcptrOpDerived, _ uint) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_IndexIntoConst, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) IndexIntoConst(arg1 uint) (_swig_ret int) {
	return _swig_wrap_OpDerived_IndexIntoConst(_swig_base, arg1)
}

var _wrap_OpDerived_Functor__SWIG_0 unsafe.Pointer

func _swig_wrap_OpDerived_Functor__SWIG_0(base SwigcptrOpDerived, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_Functor__SWIG_0, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) Functor__SWIG_0(arg1 int) (_swig_ret int) {
	return _swig_wrap_OpDerived_Functor__SWIG_0(_swig_base, arg1)
}

var _wrap_OpDerived_Functor__SWIG_1 unsafe.Pointer

func _swig_wrap_OpDerived_Functor__SWIG_1(base SwigcptrOpDerived) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_Functor__SWIG_1, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) Functor__SWIG_1() (_swig_ret int) {
	return _swig_wrap_OpDerived_Functor__SWIG_1(_swig_base)
}

var _wrap_OpDerived_Functor__SWIG_2 unsafe.Pointer

func _swig_wrap_OpDerived_Functor__SWIG_2(base SwigcptrOpDerived, _ int, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_Functor__SWIG_2, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) Functor__SWIG_2(arg1 int, arg2 int) (_swig_ret int) {
	return _swig_wrap_OpDerived_Functor__SWIG_2(_swig_base, arg1, arg2)
}

func (p SwigcptrOpDerived) Functor(a ...interface{}) int {
	argc := len(a)
	if argc == 0 {
		return p.Functor__SWIG_1()
	}
	if argc == 1 {
		return p.Functor__SWIG_0(a[0].(int))
	}
	if argc == 2 {
		return p.Functor__SWIG_2(a[0].(int), a[1].(int))
	}
	panic("No match for overloaded function call")
}

var _wrap_OpDerived_PlusPlusPrefix unsafe.Pointer

func _swig_wrap_OpDerived_PlusPlusPrefix(base SwigcptrOpDerived) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_PlusPlusPrefix, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) PlusPlusPrefix() (_swig_ret Op) {
	return _swig_wrap_OpDerived_PlusPlusPrefix(_swig_base)
}

var _wrap_OpDerived_MinusMinusPrefix unsafe.Pointer

func _swig_wrap_OpDerived_MinusMinusPrefix(base SwigcptrOpDerived) (_ SwigcptrOp) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_MinusMinusPrefix, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) MinusMinusPrefix() (_swig_ret Op) {
	return _swig_wrap_OpDerived_MinusMinusPrefix(_swig_base)
}

var _wrap_OpDerived_DoubleCast unsafe.Pointer

func _swig_wrap_OpDerived_DoubleCast(base SwigcptrOpDerived) (_ float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_OpDerived_DoubleCast, _swig_p)
	return
}

func (_swig_base SwigcptrOpDerived) DoubleCast() (_swig_ret float64) {
	return _swig_wrap_OpDerived_DoubleCast(_swig_base)
}

var _wrap_OpDerived_sanity_check unsafe.Pointer

func _swig_wrap_OpDerived_sanity_check() {
	var _swig_p uintptr
	_cgo_runtime_cgocall(_wrap_OpDerived_sanity_check, _swig_p)
	return
}

func OpDerivedSanity_check() {
	_swig_wrap_OpDerived_sanity_check()
}

func (p SwigcptrOpDerived) SwigIsOp() {
}

func (p SwigcptrOpDerived) SwigGetOp() Op {
	return SwigcptrOp(p.Swigcptr())
}

type OpDerived interface {
	Swigcptr() uintptr
	SwigIsOpDerived()
	IntCast() (_swig_ret int)
	SetI(arg1 int)
	GetI() (_swig_ret int)
	Equal(arg1 Op) (_swig_ret Op)
	PlusEqual(arg1 Op)
	MinusEqual(arg1 Op)
	MultiplyEqual(arg1 Op)
	DivideEqual(arg1 Op)
	PercentEqual(arg1 Op)
	Minus(a ...interface{}) Op
	Not() (_swig_ret bool)
	IndexIntoConst(arg1 uint) (_swig_ret int)
	Functor(a ...interface{}) int
	PlusPlusPrefix() (_swig_ret Op)
	MinusMinusPrefix() (_swig_ret Op)
	DoubleCast() (_swig_ret float64)
	SwigIsOp()
	SwigGetOp() Op
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../director_basic.i

#ifndef SWIG_director_basic_WRAP_H_
#define SWIG_director_basic_WRAP_H_

class SwigDirector_Foo : public Foo
{
 public:
  SwigDirector_Foo(void *swig_p);
  virtual ~SwigDirector_Foo();
  std::string _swig_upcall_ping() {
    return Foo::ping();
  }
  virtual std::string ping();
  std::string _swig_upcall_pong() {
    return Foo::pong();
  }
  virtual std::string pong();
 private:
  void *go_val;
};

class SwigDirector_A : public A
{
 public:
  SwigDirector_A(void *swig_p, std::complex< int > i, double d);
  SwigDirector_A(void *swig_p, std::complex< int > i);
  SwigDirector_A(void *swig_p, int i, bool j);
  SwigDirector_A(void *swig_p, int i);
  virtual ~SwigDirector_A();
  int _swig_upcall_f__SWIG_0(int i) {
    return A::f(i);
  }
  virtual int f(int i);
  int _swig_upcall_f__SWIG_1() {
    return A::f();
  }
  virtual int f();
  int _swig_upcall_rg__SWIG_0(int i) {
    return A::gg(i);
  }
  virtual int gg(int i);
  int _swig_upcall_rg__SWIG_1() {
    return A::gg();
  }
  virtual int gg();
 private:
  void *go_val;
};

class SwigDirector_MyClass : public MyClass
{
 public:
  SwigDirector_MyClass(void *swig_p, int a);
  SwigDirector_MyClass(void *swig_p);
  void _swig_upcall_method(VoidType *arg0) {
    MyClass::method(arg0);
  }
  virtual void method(VoidType *arg0);
  virtual ~SwigDirector_MyClass();
  Bar _swig_upcall_vmethod(Bar b) {
    return MyClass::vmethod(b);
  }
  virtual Bar vmethod(Bar b);
  Bar *_swig_upcall_pmethod(Bar *b) {
    return MyClass::pmethod(b);
  }
  virtual Bar *pmethod(Bar *b);
 private:
  void *go_val;
};

#endif

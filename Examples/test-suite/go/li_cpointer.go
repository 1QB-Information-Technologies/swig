/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../li_cpointer.i

package li_cpointer

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

var _wrap_new_intp unsafe.Pointer

func New_intp() (_swig_ret *int) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ret))
	_cgo_runtime_cgocall(_wrap_new_intp, _swig_p)
	return
}
var _wrap_copy_intp unsafe.Pointer

func Copy_intp(arg1 int) (_swig_ret *int) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_copy_intp, _swig_p)
	return
}
var _wrap_delete_intp unsafe.Pointer

func _swig_wrap_delete_intp(base *int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_intp, _swig_p)
	return
}

func Delete_intp(arg1 *int) {
	_swig_wrap_delete_intp(arg1)
}

var _wrap_intp_assign unsafe.Pointer

func _swig_wrap_intp_assign(base *int, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_intp_assign, _swig_p)
	return
}

func Intp_assign(arg1 *int, arg2 int) {
	_swig_wrap_intp_assign(arg1, arg2)
}

var _wrap_intp_value unsafe.Pointer

func Intp_value(arg1 *int) (_swig_ret int) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_intp_value, _swig_p)
	return
}
type SwigcptrDoublep uintptr

func (p SwigcptrDoublep) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrDoublep) SwigIsDoublep() {
}

var _wrap_new_doublep unsafe.Pointer

func _swig_wrap_new_doublep() (base SwigcptrDoublep) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_doublep, _swig_p)
	return
}

func NewDoublep() (_swig_ret Doublep) {
	return _swig_wrap_new_doublep()
}

var _wrap_delete_doublep unsafe.Pointer

func _swig_wrap_delete_doublep(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_doublep, _swig_p)
	return
}

func DeleteDoublep(arg1 Doublep) {
	_swig_wrap_delete_doublep(arg1.Swigcptr())
}

var _wrap_doublep_assign unsafe.Pointer

func _swig_wrap_doublep_assign(base SwigcptrDoublep, _ float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_doublep_assign, _swig_p)
	return
}

func (arg1 SwigcptrDoublep) Assign(arg2 float64) {
	_swig_wrap_doublep_assign(arg1, arg2)
}

var _wrap_doublep_value unsafe.Pointer

func _swig_wrap_doublep_value(base SwigcptrDoublep) (_ float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_doublep_value, _swig_p)
	return
}

func (arg1 SwigcptrDoublep) Value() (_swig_ret float64) {
	return _swig_wrap_doublep_value(arg1)
}

var _wrap_doublep_cast unsafe.Pointer

func _swig_wrap_doublep_cast(base SwigcptrDoublep) (_ *float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_doublep_cast, _swig_p)
	return
}

func (arg1 SwigcptrDoublep) Cast() (_swig_ret *float64) {
	return _swig_wrap_doublep_cast(arg1)
}

var _wrap_doublep_frompointer unsafe.Pointer

func _swig_wrap_doublep_frompointer(base *float64) (_ SwigcptrDoublep) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_doublep_frompointer, _swig_p)
	return
}

func DoublepFrompointer(arg1 *float64) (_swig_ret Doublep) {
	return _swig_wrap_doublep_frompointer(arg1)
}

type Doublep interface {
	Swigcptr() uintptr
	SwigIsDoublep()
	Assign(arg2 float64)
	Value() (_swig_ret float64)
	Cast() (_swig_ret *float64)
}

var _wrap_int_to_uint unsafe.Pointer

func Int_to_uint(arg1 int) (_swig_ret uint) {
	_swig_p := uintptr(unsafe.Pointer(&arg1))
	_cgo_runtime_cgocall(_wrap_int_to_uint, _swig_p)
	return
}

type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../overload_extendc.i

package overload_extendc

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrFoo uintptr

func (p SwigcptrFoo) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrFoo) SwigIsFoo() {
}

var _wrap_Foo_dummy_set unsafe.Pointer

func _swig_wrap_Foo_dummy_set(base SwigcptrFoo, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_dummy_set, _swig_p)
	return
}

func (arg1 SwigcptrFoo) SetDummy(arg2 int) {
	_swig_wrap_Foo_dummy_set(arg1, arg2)
}

var _wrap_Foo_dummy_get unsafe.Pointer

func _swig_wrap_Foo_dummy_get(base SwigcptrFoo) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_dummy_get, _swig_p)
	return
}

func (arg1 SwigcptrFoo) GetDummy() (_swig_ret int) {
	return _swig_wrap_Foo_dummy_get(arg1)
}

var _wrap_Foo_test__SWIG_0 unsafe.Pointer

func _swig_wrap_Foo_test__SWIG_0(base SwigcptrFoo, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test__SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test__SWIG_0(arg2 int) (_swig_ret int) {
	return _swig_wrap_Foo_test__SWIG_0(arg1, arg2)
}

var _wrap_Foo_test__SWIG_1 unsafe.Pointer

func _swig_wrap_Foo_test__SWIG_1(base SwigcptrFoo, _ string) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test__SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test__SWIG_1(arg2 string) (_swig_ret int) {
	return _swig_wrap_Foo_test__SWIG_1(arg1, arg2)
}

var _wrap_Foo_test__SWIG_2 unsafe.Pointer

func _swig_wrap_Foo_test__SWIG_2(base SwigcptrFoo, _ float64, _ float64) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test__SWIG_2, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test__SWIG_2(arg2 float64, arg3 float64) (_swig_ret int) {
	return _swig_wrap_Foo_test__SWIG_2(arg1, arg2, arg3)
}

var _wrap_Foo_test__SWIG_3 unsafe.Pointer

func _swig_wrap_Foo_test__SWIG_3(base int, _ SwigcptrFoo, _ string, _ int, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test__SWIG_3, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test__SWIG_3(arg2 string, arg3 int, _swig_args ...interface{}) (_swig_ret int) {
	var arg4 int
	if len(_swig_args) > 0 {
		arg4 = _swig_args[0].(int)
	}
	return _swig_wrap_Foo_test__SWIG_3(len(_swig_args), arg1, arg2, arg3, arg4)
}

var _wrap_Foo_test__SWIG_4 unsafe.Pointer

func _swig_wrap_Foo_test__SWIG_4(base int, _ SwigcptrFoo, _ uintptr, _ int, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test__SWIG_4, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test__SWIG_4(arg2 Foo, _swig_args ...interface{}) (_swig_ret int) {
	var arg3 int
	if len(_swig_args) > 0 {
		arg3 = _swig_args[0].(int)
	}
	var arg4 int
	if len(_swig_args) > 1 {
		arg4 = _swig_args[1].(int)
	}
	return _swig_wrap_Foo_test__SWIG_4(len(_swig_args), arg1, arg2.Swigcptr(), arg3, arg4)
}

func (p SwigcptrFoo) Test(a ...interface{}) int {
	argc := len(a)
	if argc >= 1 && argc <= 3 {
		if _, ok := a[0].(Foo); !ok {
			goto check_1
		}
		if argc > 1 {
		if _, ok := a[1].(int); !ok {
			goto check_1
		}
		}
		switch argc {
		case 1:
			return p.Test__SWIG_4(a[0].(Foo))
		case 2:
			return p.Test__SWIG_4(a[0].(Foo), a[1])
		case 3:
			return p.Test__SWIG_4(a[0].(Foo), a[1], a[2])
		}
	}
check_1:
	if argc == 1 {
		if _, ok := a[0].(int); !ok {
			goto check_2
		}
		return p.Test__SWIG_0(a[0].(int))
	}
check_2:
	if argc == 1 {
		return p.Test__SWIG_1(a[0].(string))
	}
	if argc == 2 {
		if _, ok := a[0].(float64); !ok {
			goto check_4
		}
		if _, ok := a[1].(float64); !ok {
			goto check_4
		}
		return p.Test__SWIG_2(a[0].(float64), a[1].(float64))
	}
check_4:
	if argc >= 2 && argc <= 3 {
		switch argc {
		case 2:
			return p.Test__SWIG_3(a[0].(string), a[1].(int))
		case 3:
			return p.Test__SWIG_3(a[0].(string), a[1].(int), a[2])
		}
	}
	panic("No match for overloaded function call")
}

var _wrap_new_Foo unsafe.Pointer

func _swig_wrap_new_Foo() (base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Foo, _swig_p)
	return
}

func NewFoo() (_swig_ret Foo) {
	return _swig_wrap_new_Foo()
}

var _wrap_delete_Foo unsafe.Pointer

func _swig_wrap_delete_Foo(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Foo, _swig_p)
	return
}

func DeleteFoo(arg1 Foo) {
	_swig_wrap_delete_Foo(arg1.Swigcptr())
}

type Foo interface {
	Swigcptr() uintptr
	SwigIsFoo()
	SetDummy(arg2 int)
	GetDummy() (_swig_ret int)
	Test(a ...interface{}) int
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


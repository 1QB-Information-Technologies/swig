/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../director_nspace_director_name_collision.i

package director_nspace_director_name_collision

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type _swig_DirectorFoo struct {
	SwigcptrFoo
	v interface{}
}

func (p *_swig_DirectorFoo) Swigcptr() uintptr {
	return p.SwigcptrFoo.Swigcptr()
}

func (p *_swig_DirectorFoo) SwigIsFoo() {
}

func (p *_swig_DirectorFoo) DirectorInterface() interface{} {
	return p.v
}

var _wrap__swig_NewDirectorFooFoo unsafe.Pointer

func _swig_NewDirectorFooFoo(_swig_director *_swig_DirectorFoo) (_swig_ret SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_director))
	_cgo_runtime_cgocall(_wrap__swig_NewDirectorFooFoo, _swig_p)
	return
}

func NewDirectorFoo(v interface{}) Foo {
	p := &_swig_DirectorFoo{0, v}
	p.SwigcptrFoo = _swig_NewDirectorFooFoo(p)
	return p
}

var _wrap_DeleteDirectorFoo unsafe.Pointer

func _swig_wrap_DeleteDirectorFoo(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_DeleteDirectorFoo, _swig_p)
	return
}

func DeleteDirectorFoo(arg1 Foo) {
	_swig_wrap_DeleteDirectorFoo(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_Foo(p *_swig_DirectorFoo) {
	p.SwigcptrFoo = 0
}

type _swig_DirectorInterfaceFooPing interface {
	Ping() string
}

var _wrap__swig_DirectorFoo_upcall_Ping unsafe.Pointer

func _swig_wrap__swig_DirectorFoo_upcall_Ping(_swig_ptr SwigcptrFoo) (_swig_ret string) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ptr))
	_cgo_runtime_cgocall(_wrap__swig_DirectorFoo_upcall_Ping, _swig_p)
	return
}

func (swig_p *_swig_DirectorFoo) Ping() string {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceFooPing); swig_ok {
		return swig_g.Ping()
	}
	var swig_r string
	swig_r = _swig_wrap__swig_DirectorFoo_upcall_Ping(swig_p.SwigcptrFoo)
	return swig_r
}

func DirectorFooPing(p Foo) string {
	var swig_r string
	swig_r = _swig_wrap__swig_DirectorFoo_upcall_Ping(p.(*_swig_DirectorFoo).SwigcptrFoo)
	return swig_r
}

func Swig_DirectorFoo_callback_ping(p *_swig_DirectorFoo) (swig_result string) {
	var swig_r string
	swig_r = p.Ping()
	return swig_r
}

type SwigcptrFoo uintptr

func (p SwigcptrFoo) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrFoo) SwigIsFoo() {
}

func (p SwigcptrFoo) DirectorInterface() interface{} {
	return nil
}

var _wrap_delete_Foo unsafe.Pointer

func _swig_wrap_delete_Foo(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Foo, _swig_p)
	return
}

func DeleteFoo(arg1 Foo) {
	_swig_wrap_delete_Foo(arg1.Swigcptr())
}

var _wrap_Foo_ping unsafe.Pointer

func _swig_wrap_Foo_ping(base SwigcptrFoo) (_ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_ping, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Ping() (_swig_ret string) {
	return _swig_wrap_Foo_ping(arg1)
}

var _wrap_new_Foo unsafe.Pointer

func _swig_wrap_new_Foo() (base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Foo, _swig_p)
	return
}

func NewFoo() (_swig_ret Foo) {
	return _swig_wrap_new_Foo()
}

type Foo interface {
	Swigcptr() uintptr
	SwigIsFoo()
	DirectorInterface() interface{}
	Ping() (_swig_ret string)
}


type SwigcptrSwigDirector_Foo uintptr
type SwigDirector_Foo interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_Foo) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


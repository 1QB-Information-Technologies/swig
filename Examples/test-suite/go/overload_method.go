/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../overload_method.i

package overload_method

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrBase uintptr

func (p SwigcptrBase) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrBase) SwigIsBase() {
}

var _wrap_new_Base unsafe.Pointer

func _swig_wrap_new_Base() (base SwigcptrBase) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Base, _swig_p)
	return
}

func NewBase() (_swig_ret Base) {
	return _swig_wrap_new_Base()
}

var _wrap_Base_method unsafe.Pointer

func _swig_wrap_Base_method(base SwigcptrBase) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Base_method, _swig_p)
	return
}

func (arg1 SwigcptrBase) Method() (_swig_ret int) {
	return _swig_wrap_Base_method(arg1)
}

var _wrap_Base_overloaded_method__SWIG_0 unsafe.Pointer

func _swig_wrap_Base_overloaded_method__SWIG_0(base SwigcptrBase, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Base_overloaded_method__SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrBase) Overloaded_method__SWIG_0(arg2 int) {
	_swig_wrap_Base_overloaded_method__SWIG_0(arg1, arg2)
}

var _wrap_Base_overloaded_method__SWIG_1 unsafe.Pointer

func _swig_wrap_Base_overloaded_method__SWIG_1(base SwigcptrBase) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Base_overloaded_method__SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrBase) Overloaded_method__SWIG_1() (_swig_ret int) {
	return _swig_wrap_Base_overloaded_method__SWIG_1(arg1)
}

func (p SwigcptrBase) Overloaded_method(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 0 {
		return p.Overloaded_method__SWIG_1()
	}
	if argc == 1 {
		p.Overloaded_method__SWIG_0(a[0].(int))
		return 0
	}
	panic("No match for overloaded function call")
}

var _wrap_delete_Base unsafe.Pointer

func _swig_wrap_delete_Base(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Base, _swig_p)
	return
}

func DeleteBase(arg1 Base) {
	_swig_wrap_delete_Base(arg1.Swigcptr())
}

type Base interface {
	Swigcptr() uintptr
	SwigIsBase()
	Method() (_swig_ret int)
	Overloaded_method(a ...interface{}) interface{}
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


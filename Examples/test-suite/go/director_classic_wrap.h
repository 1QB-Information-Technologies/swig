/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../director_classic.i

#ifndef SWIG_director_classic_WRAP_H_
#define SWIG_director_classic_WRAP_H_

class SwigDirector_Being : public Being
{
 public:
  SwigDirector_Being(void *swig_p);
  std::string _swig_upcall_id() {
    return Being::id();
  }
  virtual std::string id();
  virtual ~SwigDirector_Being();
 private:
  void *go_val;
};

class SwigDirector_Person : public Person
{
 public:
  SwigDirector_Person(void *swig_p);
  std::string _swig_upcall_id() {
    return Person::id();
  }
  virtual std::string id();
  virtual ~SwigDirector_Person();
 private:
  void *go_val;
};

class SwigDirector_Child : public Child
{
 public:
  SwigDirector_Child(void *swig_p);
  std::string _swig_upcall_id() {
    return Child::id();
  }
  virtual std::string id();
  virtual ~SwigDirector_Child();
 private:
  void *go_val;
};

class SwigDirector_GrandChild : public GrandChild
{
 public:
  SwigDirector_GrandChild(void *swig_p);
  std::string _swig_upcall_id() {
    return GrandChild::id();
  }
  virtual std::string id();
  virtual ~SwigDirector_GrandChild();
 private:
  void *go_val;
};

class SwigDirector_OrphanPerson : public OrphanPerson
{
 public:
  SwigDirector_OrphanPerson(void *swig_p);
  std::string _swig_upcall_id() {
    return Person::id();
  }
  virtual std::string id();
  virtual ~SwigDirector_OrphanPerson();
 private:
  void *go_val;
};

class SwigDirector_OrphanChild : public OrphanChild
{
 public:
  SwigDirector_OrphanChild(void *swig_p);
  std::string _swig_upcall_id() {
    return Child::id();
  }
  virtual std::string id();
  virtual ~SwigDirector_OrphanChild();
 private:
  void *go_val;
};

#endif

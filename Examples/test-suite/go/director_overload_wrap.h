/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../director_overload.i

#ifndef SWIG_director_overload_WRAP_H_
#define SWIG_director_overload_WRAP_H_

class SwigDirector_OverloadedClass : public OverloadedClass
{
 public:
  SwigDirector_OverloadedClass(void *swig_p);
  virtual ~SwigDirector_OverloadedClass();
  void _swig_upcall_method1() const {
    OverloadedClass::method1();
  }
  virtual void method1() const;
  void _swig_upcall_method2__SWIG_0() const {
    OverloadedClass::method2();
  }
  virtual void method2() const;
  void _swig_upcall_method3() const {
    OverloadedClass::method3();
  }
  virtual void method3() const;
  void _swig_upcall_method2__SWIG_1(bool b) const {
    OverloadedClass::method2(b);
  }
  virtual void method2(bool b) const;
 private:
  void *go_val;
};

class SwigDirector_OverloadedPointers : public OverloadedPointers
{
 public:
  SwigDirector_OverloadedPointers(void *swig_p);
  virtual ~SwigDirector_OverloadedPointers();
  void _swig_upcall_method__SWIG_0(int *p) const {
    OverloadedPointers::method(p);
  }
  virtual void method(int *p) const;
  void _swig_upcall_method__SWIG_1(double *p) const {
    OverloadedPointers::method(p);
  }
  virtual void method(double *p) const;
  void _swig_upcall_method__SWIG_2(bool &r) const {
    OverloadedPointers::method(r);
  }
  virtual void method(bool &r) const;
  void _swig_upcall_method__SWIG_3(short &r) const {
    OverloadedPointers::method(r);
  }
  virtual void method(short &r) const;
  void _swig_upcall_method__SWIG_4(OverloadedClass *p) const {
    OverloadedPointers::method(p);
  }
  virtual void method(OverloadedClass *p) const;
  void _swig_upcall_method__SWIG_5(OverloadedPointers *p) const {
    OverloadedPointers::method(p);
  }
  virtual void method(OverloadedPointers *p) const;
  void _swig_upcall_notover(int *p) const {
    OverloadedPointers::notover(p);
  }
  virtual void notover(int *p) const;
 private:
  void *go_val;
};

#endif

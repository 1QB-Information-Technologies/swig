/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../template_array_numeric.i

package template_array_numeric

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrArray4f uintptr

func (p SwigcptrArray4f) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrArray4f) SwigIsArray4f() {
}

var _wrap_new_Array4f__SWIG_0 unsafe.Pointer

func _swig_wrap_new_Array4f__SWIG_0() (base SwigcptrArray4f) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Array4f__SWIG_0, _swig_p)
	return
}

func NewArray4f__SWIG_0() (_swig_ret Array4f) {
	return _swig_wrap_new_Array4f__SWIG_0()
}

var _wrap_new_Array4f__SWIG_1 unsafe.Pointer

func _swig_wrap_new_Array4f__SWIG_1(base *float32) (_ SwigcptrArray4f) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Array4f__SWIG_1, _swig_p)
	return
}

func NewArray4f__SWIG_1(arg1 *float32) (_swig_ret Array4f) {
	return _swig_wrap_new_Array4f__SWIG_1(arg1)
}

func NewArray4f(a ...interface{}) Array4f {
	argc := len(a)
	if argc == 0 {
		return NewArray4f__SWIG_0()
	}
	if argc == 1 {
		return NewArray4f__SWIG_1(a[0].(*float32))
	}
	panic("No match for overloaded function call")
}

var _wrap_delete_Array4f unsafe.Pointer

func _swig_wrap_delete_Array4f(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Array4f, _swig_p)
	return
}

func DeleteArray4f(arg1 Array4f) {
	_swig_wrap_delete_Array4f(arg1.Swigcptr())
}

type Array4f interface {
	Swigcptr() uintptr
	SwigIsArray4f()
}

var _wrap_make_array4f unsafe.Pointer

func _swig_wrap_make_array4f(base *float32) (_ SwigcptrArray4f) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_make_array4f, _swig_p)
	return
}

func Make_array4f(arg1 *float32) (_swig_ret Array4f) {
	return _swig_wrap_make_array4f(arg1)
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


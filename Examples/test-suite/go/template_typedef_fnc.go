/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../template_typedef_fnc.i

package template_typedef_fnc

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrIntVector uintptr

func (p SwigcptrIntVector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrIntVector) SwigIsIntVector() {
}

var _wrap_new_IntVector__SWIG_0 unsafe.Pointer

func _swig_wrap_new_IntVector__SWIG_0() (base SwigcptrIntVector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_IntVector__SWIG_0, _swig_p)
	return
}

func NewIntVector__SWIG_0() (_swig_ret IntVector) {
	return _swig_wrap_new_IntVector__SWIG_0()
}

var _wrap_new_IntVector__SWIG_1 unsafe.Pointer

func _swig_wrap_new_IntVector__SWIG_1(base int64) (_ SwigcptrIntVector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_IntVector__SWIG_1, _swig_p)
	return
}

func NewIntVector__SWIG_1(arg1 int64) (_swig_ret IntVector) {
	return _swig_wrap_new_IntVector__SWIG_1(arg1)
}

func NewIntVector(a ...interface{}) IntVector {
	argc := len(a)
	if argc == 0 {
		return NewIntVector__SWIG_0()
	}
	if argc == 1 {
		return NewIntVector__SWIG_1(a[0].(int64))
	}
	panic("No match for overloaded function call")
}

var _wrap_IntVector_size unsafe.Pointer

func _swig_wrap_IntVector_size(base SwigcptrIntVector) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_IntVector_size, _swig_p)
	return
}

func (arg1 SwigcptrIntVector) Size() (_swig_ret int64) {
	return _swig_wrap_IntVector_size(arg1)
}

var _wrap_IntVector_capacity unsafe.Pointer

func _swig_wrap_IntVector_capacity(base SwigcptrIntVector) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_IntVector_capacity, _swig_p)
	return
}

func (arg1 SwigcptrIntVector) Capacity() (_swig_ret int64) {
	return _swig_wrap_IntVector_capacity(arg1)
}

var _wrap_IntVector_reserve unsafe.Pointer

func _swig_wrap_IntVector_reserve(base SwigcptrIntVector, _ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_IntVector_reserve, _swig_p)
	return
}

func (arg1 SwigcptrIntVector) Reserve(arg2 int64) {
	_swig_wrap_IntVector_reserve(arg1, arg2)
}

var _wrap_IntVector_isEmpty unsafe.Pointer

func _swig_wrap_IntVector_isEmpty(base SwigcptrIntVector) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_IntVector_isEmpty, _swig_p)
	return
}

func (arg1 SwigcptrIntVector) IsEmpty() (_swig_ret bool) {
	return _swig_wrap_IntVector_isEmpty(arg1)
}

var _wrap_IntVector_clear unsafe.Pointer

func _swig_wrap_IntVector_clear(base SwigcptrIntVector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_IntVector_clear, _swig_p)
	return
}

func (arg1 SwigcptrIntVector) Clear() {
	_swig_wrap_IntVector_clear(arg1)
}

var _wrap_IntVector_add unsafe.Pointer

func _swig_wrap_IntVector_add(base SwigcptrIntVector, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_IntVector_add, _swig_p)
	return
}

func (arg1 SwigcptrIntVector) Add(arg2 int) {
	_swig_wrap_IntVector_add(arg1, arg2)
}

var _wrap_IntVector_get unsafe.Pointer

func _swig_wrap_IntVector_get(base SwigcptrIntVector, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_IntVector_get, _swig_p)
	return
}

func (arg1 SwigcptrIntVector) Get(arg2 int) (_swig_ret int) {
	return _swig_wrap_IntVector_get(arg1, arg2)
}

var _wrap_IntVector_set unsafe.Pointer

func _swig_wrap_IntVector_set(base SwigcptrIntVector, _ int, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_IntVector_set, _swig_p)
	return
}

func (arg1 SwigcptrIntVector) Set(arg2 int, arg3 int) {
	_swig_wrap_IntVector_set(arg1, arg2, arg3)
}

var _wrap_delete_IntVector unsafe.Pointer

func _swig_wrap_delete_IntVector(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_IntVector, _swig_p)
	return
}

func DeleteIntVector(arg1 IntVector) {
	_swig_wrap_delete_IntVector(arg1.Swigcptr())
}

type IntVector interface {
	Swigcptr() uintptr
	SwigIsIntVector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 int)
	Get(arg2 int) (_swig_ret int)
	Set(arg2 int, arg3 int)
}

var _wrap_setCallback unsafe.Pointer

func _swig_wrap_setCallback(base *_swig_fnptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_setCallback, _swig_p)
	return
}

func SetCallback(arg1 *_swig_fnptr) {
	_swig_wrap_setCallback(arg1)
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


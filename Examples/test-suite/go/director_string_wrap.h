/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../director_string.i

#ifndef SWIG_director_string_WRAP_H_
#define SWIG_director_string_WRAP_H_

class SwigDirector_A : public A
{
 public:
  SwigDirector_A(void *swig_p, std::string const &first);
  virtual ~SwigDirector_A();
  std::string const &_swig_upcall_get_first() const {
    return A::get_first();
  }
  virtual std::string const &get_first() const;
  std::string const &_swig_upcall_get(int n) const {
    return A::get(n);
  }
  virtual std::string const &get(int n) const;
  std::string const &_swig_upcall_call_get_first() const {
    return A::call_get_first();
  }
  virtual std::string const &call_get_first() const;
  std::string const &_swig_upcall_call_get(int n) const {
    return A::call_get(n);
  }
  virtual std::string const &call_get(int n) const;
  int _swig_upcall_string_length(std::string const &s) const {
    return A::string_length(s);
  }
  virtual int string_length(std::string const &s) const;
  void _swig_upcall_process_text(char const *text) {
    A::process_text(text);
  }
  virtual void process_text(char const *text);
 private:
  void *go_val;
};

#endif

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../overload_return_type.i

package overload_return_type

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrA uintptr

func (p SwigcptrA) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrA) SwigIsA() {
}

var _wrap_new_A unsafe.Pointer

func _swig_wrap_new_A() (base SwigcptrA) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_A, _swig_p)
	return
}

func NewA() (_swig_ret A) {
	return _swig_wrap_new_A()
}

var _wrap_delete_A unsafe.Pointer

func _swig_wrap_delete_A(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_A, _swig_p)
	return
}

func DeleteA(arg1 A) {
	_swig_wrap_delete_A(arg1.Swigcptr())
}

type A interface {
	Swigcptr() uintptr
	SwigIsA()
}

type SwigcptrB uintptr

func (p SwigcptrB) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrB) SwigIsB() {
}

var _wrap_B_foo__SWIG_0 unsafe.Pointer

func _swig_wrap_B_foo__SWIG_0(base SwigcptrB, _ int) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_B_foo__SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrB) Foo__SWIG_0(arg2 int) (_swig_ret int) {
	return _swig_wrap_B_foo__SWIG_0(arg1, arg2)
}

var _wrap_B_foo__SWIG_1 unsafe.Pointer

func _swig_wrap_B_foo__SWIG_1(base SwigcptrB, _ string) (_ SwigcptrA) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_B_foo__SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrB) Foo__SWIG_1(arg2 string) (_swig_ret A) {
	return _swig_wrap_B_foo__SWIG_1(arg1, arg2)
}

func (p SwigcptrB) Foo(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(int); !ok {
			goto check_1
		}
		return p.Foo__SWIG_0(a[0].(int))
	}
check_1:
	if argc == 1 {
		return p.Foo__SWIG_1(a[0].(string))
	}
	panic("No match for overloaded function call")
}

var _wrap_new_B unsafe.Pointer

func _swig_wrap_new_B() (base SwigcptrB) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_B, _swig_p)
	return
}

func NewB() (_swig_ret B) {
	return _swig_wrap_new_B()
}

var _wrap_delete_B unsafe.Pointer

func _swig_wrap_delete_B(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_B, _swig_p)
	return
}

func DeleteB(arg1 B) {
	_swig_wrap_delete_B(arg1.Swigcptr())
}

type B interface {
	Swigcptr() uintptr
	SwigIsB()
	Foo(a ...interface{}) interface{}
}

var _wrap_foo__SWIG_0 unsafe.Pointer

func _swig_wrap_foo__SWIG_0(base int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_foo__SWIG_0, _swig_p)
	return
}

func Foo__SWIG_0(arg1 int) {
	_swig_wrap_foo__SWIG_0(arg1)
}

var _wrap_foo__SWIG_1 unsafe.Pointer

func Foo__SWIG_1() (_swig_ret int) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ret))
	_cgo_runtime_cgocall(_wrap_foo__SWIG_1, _swig_p)
	return
}
func Foo(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 0 {
		return Foo__SWIG_1()
	}
	if argc == 1 {
		Foo__SWIG_0(a[0].(int))
		return 0
	}
	panic("No match for overloaded function call")
}

var _wrap_bar__SWIG_0 unsafe.Pointer

func Bar__SWIG_0() (_swig_ret int) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ret))
	_cgo_runtime_cgocall(_wrap_bar__SWIG_0, _swig_p)
	return
}
var _wrap_bar__SWIG_1 unsafe.Pointer

func _swig_wrap_bar__SWIG_1(base int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_bar__SWIG_1, _swig_p)
	return
}

func Bar__SWIG_1(arg1 int) {
	_swig_wrap_bar__SWIG_1(arg1)
}

func Bar(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 0 {
		return Bar__SWIG_0()
	}
	if argc == 1 {
		Bar__SWIG_1(a[0].(int))
		return 0
	}
	panic("No match for overloaded function call")
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


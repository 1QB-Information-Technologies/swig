/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../director_using.i

#ifndef SWIG_director_using_WRAP_H_
#define SWIG_director_using_WRAP_H_

class SwigDirector_Foo_int : public Foo< int >
{
 public:
  SwigDirector_Foo_int(void *swig_p);
  virtual ~SwigDirector_Foo_int();
  virtual std::string do_advance();
  virtual std::string do_step() const;
 private:
  void *go_val;
};

class SwigDirector_Bar : public Bar
{
 public:
  SwigDirector_Bar(void *swig_p);
  virtual ~SwigDirector_Bar();
  std::string _swig_upcall_do_advance() {
    return Bar::do_advance();
  }
  virtual std::string do_advance();
  virtual std::string do_step() const;
 private:
  void *go_val;
};

class SwigDirector_FooBar_int : public FooBar< int >
{
 public:
  SwigDirector_FooBar_int(void *swig_p);
  virtual ~SwigDirector_FooBar_int();
  std::string _swig_upcall_do_advance() {
    return FooBar< int >::do_advance();
  }
  virtual std::string do_advance();
  virtual std::string do_step() const;
  virtual int get_value() const;
 private:
  void *go_val;
};

class SwigDirector_SomeBase : public SomeBase
{
 public:
  SwigDirector_SomeBase(void *swig_p);
  virtual ~SwigDirector_SomeBase();
  void _swig_upcall_method1() {
    SomeBase::method1();
  }
  virtual void method1();
  void _swig_upcall_method2() {
    SomeBase::method2();
  }
  virtual void method2();
 private:
  void *go_val;
};

class SwigDirector_PrivateDerived : public PrivateDerived
{
 public:
  SwigDirector_PrivateDerived(void *swig_p);
  virtual ~SwigDirector_PrivateDerived();
  void _swig_upcall_method1() {
    SomeBase::method1();
  }
  virtual void method1();
  void _swig_upcall_method2() {
    SomeBase::method2();
  }
  virtual void method2();
 private:
  void *go_val;
};

#endif

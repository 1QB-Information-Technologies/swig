/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../throw_exception.i

package throw_exception

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrError uintptr

func (p SwigcptrError) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrError) SwigIsError() {
}

var _wrap_new_Error unsafe.Pointer

func _swig_wrap_new_Error() (base SwigcptrError) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Error, _swig_p)
	return
}

func NewError() (_swig_ret Error) {
	return _swig_wrap_new_Error()
}

var _wrap_delete_Error unsafe.Pointer

func _swig_wrap_delete_Error(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Error, _swig_p)
	return
}

func DeleteError(arg1 Error) {
	_swig_wrap_delete_Error(arg1.Swigcptr())
}

type Error interface {
	Swigcptr() uintptr
	SwigIsError()
}

var _wrap_test_is_Error unsafe.Pointer

func _swig_wrap_test_is_Error(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_test_is_Error, _swig_p)
	return
}

func Test_is_Error(arg1 Error) {
	_swig_wrap_test_is_Error(arg1.Swigcptr())
}

type NamespaceEnumTest int
var _wrap_enum1 unsafe.Pointer

func _swig_getenum1() (_swig_ret NamespaceEnumTest) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ret))
	_cgo_runtime_cgocall(_wrap_enum1, _swig_p)
	return
}
var Enum1 NamespaceEnumTest = _swig_getenum1()
var _wrap_enum2 unsafe.Pointer

func _swig_getenum2() (_swig_ret NamespaceEnumTest) {
	_swig_p := uintptr(unsafe.Pointer(&_swig_ret))
	_cgo_runtime_cgocall(_wrap_enum2, _swig_p)
	return
}
var Enum2 NamespaceEnumTest = _swig_getenum2()
type SwigcptrFoo uintptr

func (p SwigcptrFoo) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrFoo) SwigIsFoo() {
}

var _wrap_Foo_test_int unsafe.Pointer

func _swig_wrap_Foo_test_int(base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test_int, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test_int() {
	_swig_wrap_Foo_test_int(arg1)
}

var _wrap_Foo_test_msg unsafe.Pointer

func _swig_wrap_Foo_test_msg(base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test_msg, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test_msg() {
	_swig_wrap_Foo_test_msg(arg1)
}

var _wrap_Foo_test_cls unsafe.Pointer

func _swig_wrap_Foo_test_cls(base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test_cls, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test_cls() {
	_swig_wrap_Foo_test_cls(arg1)
}

var _wrap_Foo_test_cls_ptr unsafe.Pointer

func _swig_wrap_Foo_test_cls_ptr(base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test_cls_ptr, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test_cls_ptr() {
	_swig_wrap_Foo_test_cls_ptr(arg1)
}

var _wrap_Foo_test_cls_ref unsafe.Pointer

func _swig_wrap_Foo_test_cls_ref(base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test_cls_ref, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test_cls_ref() {
	_swig_wrap_Foo_test_cls_ref(arg1)
}

var _wrap_Foo_test_cls_td unsafe.Pointer

func _swig_wrap_Foo_test_cls_td(base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test_cls_td, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test_cls_td() {
	_swig_wrap_Foo_test_cls_td(arg1)
}

var _wrap_Foo_test_cls_ptr_td unsafe.Pointer

func _swig_wrap_Foo_test_cls_ptr_td(base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test_cls_ptr_td, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test_cls_ptr_td() {
	_swig_wrap_Foo_test_cls_ptr_td(arg1)
}

var _wrap_Foo_test_cls_ref_td unsafe.Pointer

func _swig_wrap_Foo_test_cls_ref_td(base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test_cls_ref_td, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test_cls_ref_td() {
	_swig_wrap_Foo_test_cls_ref_td(arg1)
}

var _wrap_Foo_test_array unsafe.Pointer

func _swig_wrap_Foo_test_array(base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test_array, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test_array() {
	_swig_wrap_Foo_test_array(arg1)
}

var _wrap_Foo_test_enum unsafe.Pointer

func _swig_wrap_Foo_test_enum(base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test_enum, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test_enum() {
	_swig_wrap_Foo_test_enum(arg1)
}

var _wrap_Foo_test_multi unsafe.Pointer

func _swig_wrap_Foo_test_multi(base SwigcptrFoo, _ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Foo_test_multi, _swig_p)
	return
}

func (arg1 SwigcptrFoo) Test_multi(arg2 int) {
	_swig_wrap_Foo_test_multi(arg1, arg2)
}

var _wrap_new_Foo unsafe.Pointer

func _swig_wrap_new_Foo() (base SwigcptrFoo) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Foo, _swig_p)
	return
}

func NewFoo() (_swig_ret Foo) {
	return _swig_wrap_new_Foo()
}

var _wrap_delete_Foo unsafe.Pointer

func _swig_wrap_delete_Foo(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Foo, _swig_p)
	return
}

func DeleteFoo(arg1 Foo) {
	_swig_wrap_delete_Foo(arg1.Swigcptr())
}

type Foo interface {
	Swigcptr() uintptr
	SwigIsFoo()
	Test_int()
	Test_msg()
	Test_cls()
	Test_cls_ptr()
	Test_cls_ref()
	Test_cls_td()
	Test_cls_ptr_td()
	Test_cls_ref_td()
	Test_array()
	Test_enum()
	Test_multi(arg2 int)
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


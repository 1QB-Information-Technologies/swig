/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../overload_numeric.i

package overload_numeric

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrLimits uintptr

func (p SwigcptrLimits) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrLimits) SwigIsLimits() {
}

var _wrap_Limits_schar_min unsafe.Pointer

func _swig_wrap_Limits_schar_min(base SwigcptrLimits) (_ int8) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Limits_schar_min, _swig_p)
	return
}

func (arg1 SwigcptrLimits) Schar_min() (_swig_ret int8) {
	return _swig_wrap_Limits_schar_min(arg1)
}

var _wrap_Limits_schar_max unsafe.Pointer

func _swig_wrap_Limits_schar_max(base SwigcptrLimits) (_ int8) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Limits_schar_max, _swig_p)
	return
}

func (arg1 SwigcptrLimits) Schar_max() (_swig_ret int8) {
	return _swig_wrap_Limits_schar_max(arg1)
}

var _wrap_Limits_shrt_min unsafe.Pointer

func _swig_wrap_Limits_shrt_min(base SwigcptrLimits) (_ int16) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Limits_shrt_min, _swig_p)
	return
}

func (arg1 SwigcptrLimits) Shrt_min() (_swig_ret int16) {
	return _swig_wrap_Limits_shrt_min(arg1)
}

var _wrap_Limits_shrt_max unsafe.Pointer

func _swig_wrap_Limits_shrt_max(base SwigcptrLimits) (_ int16) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Limits_shrt_max, _swig_p)
	return
}

func (arg1 SwigcptrLimits) Shrt_max() (_swig_ret int16) {
	return _swig_wrap_Limits_shrt_max(arg1)
}

var _wrap_Limits_int_min unsafe.Pointer

func _swig_wrap_Limits_int_min(base SwigcptrLimits) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Limits_int_min, _swig_p)
	return
}

func (arg1 SwigcptrLimits) Int_min() (_swig_ret int) {
	return _swig_wrap_Limits_int_min(arg1)
}

var _wrap_Limits_int_max unsafe.Pointer

func _swig_wrap_Limits_int_max(base SwigcptrLimits) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Limits_int_max, _swig_p)
	return
}

func (arg1 SwigcptrLimits) Int_max() (_swig_ret int) {
	return _swig_wrap_Limits_int_max(arg1)
}

var _wrap_Limits_flt_min unsafe.Pointer

func _swig_wrap_Limits_flt_min(base SwigcptrLimits) (_ float32) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Limits_flt_min, _swig_p)
	return
}

func (arg1 SwigcptrLimits) Flt_min() (_swig_ret float32) {
	return _swig_wrap_Limits_flt_min(arg1)
}

var _wrap_Limits_flt_max unsafe.Pointer

func _swig_wrap_Limits_flt_max(base SwigcptrLimits) (_ float32) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Limits_flt_max, _swig_p)
	return
}

func (arg1 SwigcptrLimits) Flt_max() (_swig_ret float32) {
	return _swig_wrap_Limits_flt_max(arg1)
}

var _wrap_Limits_dbl_max unsafe.Pointer

func _swig_wrap_Limits_dbl_max(base SwigcptrLimits) (_ float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Limits_dbl_max, _swig_p)
	return
}

func (arg1 SwigcptrLimits) Dbl_max() (_swig_ret float64) {
	return _swig_wrap_Limits_dbl_max(arg1)
}

var _wrap_new_Limits unsafe.Pointer

func _swig_wrap_new_Limits() (base SwigcptrLimits) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Limits, _swig_p)
	return
}

func NewLimits() (_swig_ret Limits) {
	return _swig_wrap_new_Limits()
}

var _wrap_delete_Limits unsafe.Pointer

func _swig_wrap_delete_Limits(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Limits, _swig_p)
	return
}

func DeleteLimits(arg1 Limits) {
	_swig_wrap_delete_Limits(arg1.Swigcptr())
}

type Limits interface {
	Swigcptr() uintptr
	SwigIsLimits()
	Schar_min() (_swig_ret int8)
	Schar_max() (_swig_ret int8)
	Shrt_min() (_swig_ret int16)
	Shrt_max() (_swig_ret int16)
	Int_min() (_swig_ret int)
	Int_max() (_swig_ret int)
	Flt_min() (_swig_ret float32)
	Flt_max() (_swig_ret float32)
	Dbl_max() (_swig_ret float64)
}

type SwigcptrNums uintptr

func (p SwigcptrNums) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrNums) SwigIsNums() {
}

var _wrap_Nums_over__SWIG_0 unsafe.Pointer

func _swig_wrap_Nums_over__SWIG_0(base SwigcptrNums, _ int8) (_ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Nums_over__SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrNums) Over__SWIG_0(arg2 int8) (_swig_ret string) {
	return _swig_wrap_Nums_over__SWIG_0(arg1, arg2)
}

var _wrap_Nums_over__SWIG_1 unsafe.Pointer

func _swig_wrap_Nums_over__SWIG_1(base SwigcptrNums, _ int16) (_ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Nums_over__SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrNums) Over__SWIG_1(arg2 int16) (_swig_ret string) {
	return _swig_wrap_Nums_over__SWIG_1(arg1, arg2)
}

var _wrap_Nums_over__SWIG_2 unsafe.Pointer

func _swig_wrap_Nums_over__SWIG_2(base SwigcptrNums, _ int) (_ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Nums_over__SWIG_2, _swig_p)
	return
}

func (arg1 SwigcptrNums) Over__SWIG_2(arg2 int) (_swig_ret string) {
	return _swig_wrap_Nums_over__SWIG_2(arg1, arg2)
}

var _wrap_Nums_over__SWIG_3 unsafe.Pointer

func _swig_wrap_Nums_over__SWIG_3(base SwigcptrNums, _ float32) (_ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Nums_over__SWIG_3, _swig_p)
	return
}

func (arg1 SwigcptrNums) Over__SWIG_3(arg2 float32) (_swig_ret string) {
	return _swig_wrap_Nums_over__SWIG_3(arg1, arg2)
}

var _wrap_Nums_over__SWIG_4 unsafe.Pointer

func _swig_wrap_Nums_over__SWIG_4(base SwigcptrNums, _ float64) (_ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Nums_over__SWIG_4, _swig_p)
	return
}

func (arg1 SwigcptrNums) Over__SWIG_4(arg2 float64) (_swig_ret string) {
	return _swig_wrap_Nums_over__SWIG_4(arg1, arg2)
}

func (p SwigcptrNums) Over(a ...interface{}) string {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(int8); !ok {
			goto check_1
		}
		return p.Over__SWIG_0(a[0].(int8))
	}
check_1:
	if argc == 1 {
		if _, ok := a[0].(int16); !ok {
			goto check_2
		}
		return p.Over__SWIG_1(a[0].(int16))
	}
check_2:
	if argc == 1 {
		if _, ok := a[0].(int); !ok {
			goto check_3
		}
		return p.Over__SWIG_2(a[0].(int))
	}
check_3:
	if argc == 1 {
		if _, ok := a[0].(float32); !ok {
			goto check_4
		}
		return p.Over__SWIG_3(a[0].(float32))
	}
check_4:
	if argc == 1 {
		return p.Over__SWIG_4(a[0].(float64))
	}
	panic("No match for overloaded function call")
}

var _wrap_Nums_doublebounce unsafe.Pointer

func _swig_wrap_Nums_doublebounce(base SwigcptrNums, _ float64) (_ float64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Nums_doublebounce, _swig_p)
	return
}

func (arg1 SwigcptrNums) Doublebounce(arg2 float64) (_swig_ret float64) {
	return _swig_wrap_Nums_doublebounce(arg1, arg2)
}

var _wrap_new_Nums unsafe.Pointer

func _swig_wrap_new_Nums() (base SwigcptrNums) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Nums, _swig_p)
	return
}

func NewNums() (_swig_ret Nums) {
	return _swig_wrap_new_Nums()
}

var _wrap_delete_Nums unsafe.Pointer

func _swig_wrap_delete_Nums(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Nums, _swig_p)
	return
}

func DeleteNums(arg1 Nums) {
	_swig_wrap_delete_Nums(arg1.Swigcptr())
}

type Nums interface {
	Swigcptr() uintptr
	SwigIsNums()
	Over(a ...interface{}) string
	Doublebounce(arg2 float64) (_swig_ret float64)
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../fvirtual.i

package fvirtual

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrNode uintptr

func (p SwigcptrNode) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrNode) SwigIsNode() {
}

var _wrap_Node_addChild unsafe.Pointer

func _swig_wrap_Node_addChild(base SwigcptrNode, _ uintptr) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_Node_addChild, _swig_p)
	return
}

func (arg1 SwigcptrNode) AddChild(arg2 Node) (_swig_ret int) {
	return _swig_wrap_Node_addChild(arg1, arg2.Swigcptr())
}

var _wrap_delete_Node unsafe.Pointer

func _swig_wrap_delete_Node(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Node, _swig_p)
	return
}

func DeleteNode(arg1 Node) {
	_swig_wrap_delete_Node(arg1.Swigcptr())
}

var _wrap_new_Node unsafe.Pointer

func _swig_wrap_new_Node() (base SwigcptrNode) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Node, _swig_p)
	return
}

func NewNode() (_swig_ret Node) {
	return _swig_wrap_new_Node()
}

type Node interface {
	Swigcptr() uintptr
	SwigIsNode()
	AddChild(arg2 Node) (_swig_ret int)
}

type SwigcptrNodeSwitch uintptr

func (p SwigcptrNodeSwitch) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrNodeSwitch) SwigIsNodeSwitch() {
}

var _wrap_NodeSwitch_addChild__SWIG_0 unsafe.Pointer

func _swig_wrap_NodeSwitch_addChild__SWIG_0(base SwigcptrNodeSwitch, _ uintptr) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_NodeSwitch_addChild__SWIG_0, _swig_p)
	return
}

func (arg1 SwigcptrNodeSwitch) AddChild__SWIG_0(arg2 Node) (_swig_ret int) {
	return _swig_wrap_NodeSwitch_addChild__SWIG_0(arg1, arg2.Swigcptr())
}

var _wrap_NodeSwitch_addChild__SWIG_1 unsafe.Pointer

func _swig_wrap_NodeSwitch_addChild__SWIG_1(base SwigcptrNodeSwitch, _ uintptr, _ bool) (_ int) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_NodeSwitch_addChild__SWIG_1, _swig_p)
	return
}

func (arg1 SwigcptrNodeSwitch) AddChild__SWIG_1(arg2 Node, arg3 bool) (_swig_ret int) {
	return _swig_wrap_NodeSwitch_addChild__SWIG_1(arg1, arg2.Swigcptr(), arg3)
}

func (p SwigcptrNodeSwitch) AddChild(a ...interface{}) int {
	argc := len(a)
	if argc == 1 {
		return p.AddChild__SWIG_0(a[0].(Node))
	}
	if argc == 2 {
		return p.AddChild__SWIG_1(a[0].(Node), a[1].(bool))
	}
	panic("No match for overloaded function call")
}

var _wrap_delete_NodeSwitch unsafe.Pointer

func _swig_wrap_delete_NodeSwitch(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_NodeSwitch, _swig_p)
	return
}

func DeleteNodeSwitch(arg1 NodeSwitch) {
	_swig_wrap_delete_NodeSwitch(arg1.Swigcptr())
}

var _wrap_new_NodeSwitch unsafe.Pointer

func _swig_wrap_new_NodeSwitch() (base SwigcptrNodeSwitch) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_NodeSwitch, _swig_p)
	return
}

func NewNodeSwitch() (_swig_ret NodeSwitch) {
	return _swig_wrap_new_NodeSwitch()
}

func (p SwigcptrNodeSwitch) SwigIsNode() {
}

func (p SwigcptrNodeSwitch) SwigGetNode() Node {
	return SwigcptrNode(p.Swigcptr())
}

type NodeSwitch interface {
	Swigcptr() uintptr
	SwigIsNodeSwitch()
	AddChild(a ...interface{}) int
	SwigIsNode()
	SwigGetNode() Node
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


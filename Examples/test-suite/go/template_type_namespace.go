/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../template_type_namespace.i

package template_type_namespace

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrString_vector uintptr

func (p SwigcptrString_vector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrString_vector) SwigIsString_vector() {
}

var _wrap_new_string_vector__SWIG_0 unsafe.Pointer

func _swig_wrap_new_string_vector__SWIG_0() (base SwigcptrString_vector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_string_vector__SWIG_0, _swig_p)
	return
}

func NewString_vector__SWIG_0() (_swig_ret String_vector) {
	return _swig_wrap_new_string_vector__SWIG_0()
}

var _wrap_new_string_vector__SWIG_1 unsafe.Pointer

func _swig_wrap_new_string_vector__SWIG_1(base int64) (_ SwigcptrString_vector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_string_vector__SWIG_1, _swig_p)
	return
}

func NewString_vector__SWIG_1(arg1 int64) (_swig_ret String_vector) {
	return _swig_wrap_new_string_vector__SWIG_1(arg1)
}

func NewString_vector(a ...interface{}) String_vector {
	argc := len(a)
	if argc == 0 {
		return NewString_vector__SWIG_0()
	}
	if argc == 1 {
		return NewString_vector__SWIG_1(a[0].(int64))
	}
	panic("No match for overloaded function call")
}

var _wrap_string_vector_size unsafe.Pointer

func _swig_wrap_string_vector_size(base SwigcptrString_vector) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_string_vector_size, _swig_p)
	return
}

func (arg1 SwigcptrString_vector) Size() (_swig_ret int64) {
	return _swig_wrap_string_vector_size(arg1)
}

var _wrap_string_vector_capacity unsafe.Pointer

func _swig_wrap_string_vector_capacity(base SwigcptrString_vector) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_string_vector_capacity, _swig_p)
	return
}

func (arg1 SwigcptrString_vector) Capacity() (_swig_ret int64) {
	return _swig_wrap_string_vector_capacity(arg1)
}

var _wrap_string_vector_reserve unsafe.Pointer

func _swig_wrap_string_vector_reserve(base SwigcptrString_vector, _ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_string_vector_reserve, _swig_p)
	return
}

func (arg1 SwigcptrString_vector) Reserve(arg2 int64) {
	_swig_wrap_string_vector_reserve(arg1, arg2)
}

var _wrap_string_vector_isEmpty unsafe.Pointer

func _swig_wrap_string_vector_isEmpty(base SwigcptrString_vector) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_string_vector_isEmpty, _swig_p)
	return
}

func (arg1 SwigcptrString_vector) IsEmpty() (_swig_ret bool) {
	return _swig_wrap_string_vector_isEmpty(arg1)
}

var _wrap_string_vector_clear unsafe.Pointer

func _swig_wrap_string_vector_clear(base SwigcptrString_vector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_string_vector_clear, _swig_p)
	return
}

func (arg1 SwigcptrString_vector) Clear() {
	_swig_wrap_string_vector_clear(arg1)
}

var _wrap_string_vector_add unsafe.Pointer

func _swig_wrap_string_vector_add(base SwigcptrString_vector, _ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_string_vector_add, _swig_p)
	return
}

func (arg1 SwigcptrString_vector) Add(arg2 string) {
	_swig_wrap_string_vector_add(arg1, arg2)
}

var _wrap_string_vector_get unsafe.Pointer

func _swig_wrap_string_vector_get(base SwigcptrString_vector, _ int) (_ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_string_vector_get, _swig_p)
	return
}

func (arg1 SwigcptrString_vector) Get(arg2 int) (_swig_ret string) {
	return _swig_wrap_string_vector_get(arg1, arg2)
}

var _wrap_string_vector_set unsafe.Pointer

func _swig_wrap_string_vector_set(base SwigcptrString_vector, _ int, _ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_string_vector_set, _swig_p)
	return
}

func (arg1 SwigcptrString_vector) Set(arg2 int, arg3 string) {
	_swig_wrap_string_vector_set(arg1, arg2, arg3)
}

var _wrap_delete_string_vector unsafe.Pointer

func _swig_wrap_delete_string_vector(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_string_vector, _swig_p)
	return
}

func DeleteString_vector(arg1 String_vector) {
	_swig_wrap_delete_string_vector(arg1.Swigcptr())
}

type String_vector interface {
	Swigcptr() uintptr
	SwigIsString_vector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 string)
	Get(arg2 int) (_swig_ret string)
	Set(arg2 int, arg3 string)
}

var _wrap_foo unsafe.Pointer

func _swig_wrap_foo() (base SwigcptrString_vector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_foo, _swig_p)
	return
}

func Foo() (_swig_ret String_vector) {
	return _swig_wrap_foo()
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


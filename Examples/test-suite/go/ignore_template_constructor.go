/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../ignore_template_constructor.i

package ignore_template_constructor

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrFlow uintptr

func (p SwigcptrFlow) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrFlow) SwigIsFlow() {
}

var _wrap_new_Flow__SWIG_0 unsafe.Pointer

func _swig_wrap_new_Flow__SWIG_0() (base SwigcptrFlow) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Flow__SWIG_0, _swig_p)
	return
}

func NewFlow__SWIG_0() (_swig_ret Flow) {
	return _swig_wrap_new_Flow__SWIG_0()
}

var _wrap_new_Flow__SWIG_1 unsafe.Pointer

func _swig_wrap_new_Flow__SWIG_1(base float64) (_ SwigcptrFlow) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_Flow__SWIG_1, _swig_p)
	return
}

func NewFlow__SWIG_1(arg1 float64) (_swig_ret Flow) {
	return _swig_wrap_new_Flow__SWIG_1(arg1)
}

func NewFlow(a ...interface{}) Flow {
	argc := len(a)
	if argc == 0 {
		return NewFlow__SWIG_0()
	}
	if argc == 1 {
		return NewFlow__SWIG_1(a[0].(float64))
	}
	panic("No match for overloaded function call")
}

var _wrap_delete_Flow unsafe.Pointer

func _swig_wrap_delete_Flow(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_Flow, _swig_p)
	return
}

func DeleteFlow(arg1 Flow) {
	_swig_wrap_delete_Flow(arg1.Swigcptr())
}

type Flow interface {
	Swigcptr() uintptr
	SwigIsFlow()
}

type SwigcptrVectFlow uintptr

func (p SwigcptrVectFlow) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrVectFlow) SwigIsVectFlow() {
}

var _wrap_new_VectFlow__SWIG_0 unsafe.Pointer

func _swig_wrap_new_VectFlow__SWIG_0() (base SwigcptrVectFlow) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_VectFlow__SWIG_0, _swig_p)
	return
}

func NewVectFlow__SWIG_0() (_swig_ret VectFlow) {
	return _swig_wrap_new_VectFlow__SWIG_0()
}

var _wrap_new_VectFlow__SWIG_1 unsafe.Pointer

func _swig_wrap_new_VectFlow__SWIG_1(base int64) (_ SwigcptrVectFlow) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_VectFlow__SWIG_1, _swig_p)
	return
}

func NewVectFlow__SWIG_1(arg1 int64) (_swig_ret VectFlow) {
	return _swig_wrap_new_VectFlow__SWIG_1(arg1)
}

func NewVectFlow(a ...interface{}) VectFlow {
	argc := len(a)
	if argc == 0 {
		return NewVectFlow__SWIG_0()
	}
	if argc == 1 {
		return NewVectFlow__SWIG_1(a[0].(int64))
	}
	panic("No match for overloaded function call")
}

var _wrap_VectFlow_size unsafe.Pointer

func _swig_wrap_VectFlow_size(base SwigcptrVectFlow) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectFlow_size, _swig_p)
	return
}

func (arg1 SwigcptrVectFlow) Size() (_swig_ret int64) {
	return _swig_wrap_VectFlow_size(arg1)
}

var _wrap_VectFlow_capacity unsafe.Pointer

func _swig_wrap_VectFlow_capacity(base SwigcptrVectFlow) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectFlow_capacity, _swig_p)
	return
}

func (arg1 SwigcptrVectFlow) Capacity() (_swig_ret int64) {
	return _swig_wrap_VectFlow_capacity(arg1)
}

var _wrap_VectFlow_reserve unsafe.Pointer

func _swig_wrap_VectFlow_reserve(base SwigcptrVectFlow, _ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectFlow_reserve, _swig_p)
	return
}

func (arg1 SwigcptrVectFlow) Reserve(arg2 int64) {
	_swig_wrap_VectFlow_reserve(arg1, arg2)
}

var _wrap_VectFlow_isEmpty unsafe.Pointer

func _swig_wrap_VectFlow_isEmpty(base SwigcptrVectFlow) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectFlow_isEmpty, _swig_p)
	return
}

func (arg1 SwigcptrVectFlow) IsEmpty() (_swig_ret bool) {
	return _swig_wrap_VectFlow_isEmpty(arg1)
}

var _wrap_VectFlow_clear unsafe.Pointer

func _swig_wrap_VectFlow_clear(base SwigcptrVectFlow) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectFlow_clear, _swig_p)
	return
}

func (arg1 SwigcptrVectFlow) Clear() {
	_swig_wrap_VectFlow_clear(arg1)
}

var _wrap_VectFlow_add unsafe.Pointer

func _swig_wrap_VectFlow_add(base SwigcptrVectFlow, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectFlow_add, _swig_p)
	return
}

func (arg1 SwigcptrVectFlow) Add(arg2 Flow) {
	_swig_wrap_VectFlow_add(arg1, arg2.Swigcptr())
}

var _wrap_VectFlow_get unsafe.Pointer

func _swig_wrap_VectFlow_get(base SwigcptrVectFlow, _ int) (_ SwigcptrFlow) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectFlow_get, _swig_p)
	return
}

func (arg1 SwigcptrVectFlow) Get(arg2 int) (_swig_ret Flow) {
	return _swig_wrap_VectFlow_get(arg1, arg2)
}

var _wrap_VectFlow_set unsafe.Pointer

func _swig_wrap_VectFlow_set(base SwigcptrVectFlow, _ int, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_VectFlow_set, _swig_p)
	return
}

func (arg1 SwigcptrVectFlow) Set(arg2 int, arg3 Flow) {
	_swig_wrap_VectFlow_set(arg1, arg2, arg3.Swigcptr())
}

var _wrap_delete_VectFlow unsafe.Pointer

func _swig_wrap_delete_VectFlow(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_VectFlow, _swig_p)
	return
}

func DeleteVectFlow(arg1 VectFlow) {
	_swig_wrap_delete_VectFlow(arg1.Swigcptr())
}

type VectFlow interface {
	Swigcptr() uintptr
	SwigIsVectFlow()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 Flow)
	Get(arg2 int) (_swig_ret Flow)
	Set(arg2 int, arg3 Flow)
}

var _wrap_inandout unsafe.Pointer

func _swig_wrap_inandout(base uintptr) (_ SwigcptrVectFlow) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_inandout, _swig_p)
	return
}

func Inandout(arg1 VectFlow) (_swig_ret VectFlow) {
	return _swig_wrap_inandout(arg1.Swigcptr())
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}


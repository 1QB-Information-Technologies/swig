/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../director_protected.i

#ifndef SWIG_director_protected_WRAP_H_
#define SWIG_director_protected_WRAP_H_

class SwigDirector_Foo : public Foo
{
 public:
  SwigDirector_Foo(void *swig_p);
  virtual ~SwigDirector_Foo();
  std::string _swig_upcall_pong() {
    return Foo::pong();
  }
  virtual std::string pong();
  virtual std::string ping();
  std::string _swig_upcall_pang() {
    return Foo::pang();
  }
  virtual std::string pang();
  std::string _swig_upcall_used() {
    return Foo::used();
  }
  virtual std::string used();
  std::string _swig_upcall_cheer() {
    return Foo::cheer();
  }
  virtual std::string cheer();
 private:
  void *go_val;
};

class SwigDirector_Bar : public Bar
{
 public:
  SwigDirector_Bar(void *swig_p);
  virtual ~SwigDirector_Bar();
  std::string _swig_upcall_pong() {
    return Bar::pong();
  }
  virtual std::string pong();
  std::string _swig_upcall_ping() {
    return Bar::ping();
  }
  virtual std::string ping();
  std::string _swig_upcall_pang() {
    return Foo::pang();
  }
  virtual std::string pang();
  std::string _swig_upcall_used() {
    return Bar::used();
  }
  virtual std::string used();
  std::string _swig_upcall_cheer() {
    return Bar::cheer();
  }
  virtual std::string cheer();
 private:
  void *go_val;
};

class SwigDirector_A : public A
{
 public:
  SwigDirector_A(void *swig_p);
  virtual ~SwigDirector_A();
  void _swig_upcall_draw() {
    A::draw();
  }
  virtual void draw();
 private:
  void *go_val;
};

class SwigDirector_B : public B
{
 public:
  SwigDirector_B(void *swig_p);
  virtual ~SwigDirector_B();
  void _swig_upcall_draw() {
    B::draw();
  }
  virtual void draw();
 private:
  void *go_val;
};

#endif

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./../director_classes.i

#ifndef SWIG_director_classes_WRAP_H_
#define SWIG_director_classes_WRAP_H_

class SwigDirector_Base : public Base
{
 public:
  SwigDirector_Base(void *swig_p, double dd);
  virtual ~SwigDirector_Base();
  DoubleHolder _swig_upcall_Val(DoubleHolder x) {
    return Base::Val(x);
  }
  virtual DoubleHolder Val(DoubleHolder x);
  DoubleHolder &_swig_upcall_Ref(DoubleHolder &x) {
    return Base::Ref(x);
  }
  virtual DoubleHolder &Ref(DoubleHolder &x);
  DoubleHolder *_swig_upcall_Ptr(DoubleHolder *x) {
    return Base::Ptr(x);
  }
  virtual DoubleHolder *Ptr(DoubleHolder *x);
  std::string _swig_upcall_FullyOverloaded__SWIG_0(int x) {
    return Base::FullyOverloaded(x);
  }
  virtual std::string FullyOverloaded(int x);
  std::string _swig_upcall_FullyOverloaded__SWIG_1(bool x) {
    return Base::FullyOverloaded(x);
  }
  virtual std::string FullyOverloaded(bool x);
  std::string _swig_upcall_SemiOverloaded__SWIG_0(int x) {
    return Base::SemiOverloaded(x);
  }
  virtual std::string SemiOverloaded(int x);
  std::string _swig_upcall_SemiOverloaded__SWIG_1(bool x) {
    return Base::SemiOverloaded(x);
  }
  virtual std::string SemiOverloaded(bool x);
  std::string _swig_upcall_DefaultParms__SWIG_0(int x, double y) {
    return Base::DefaultParms(x,y);
  }
  virtual std::string DefaultParms(int x, double y);
  std::string _swig_upcall_DefaultParms__SWIG_1(int x) {
    return Base::DefaultParms(x);
  }
  virtual std::string DefaultParms(int x);
 private:
  void *go_val;
};

class SwigDirector_Derived : public Derived
{
 public:
  SwigDirector_Derived(void *swig_p, double dd);
  virtual ~SwigDirector_Derived();
  DoubleHolder _swig_upcall_Val(DoubleHolder x) {
    return Derived::Val(x);
  }
  virtual DoubleHolder Val(DoubleHolder x);
  DoubleHolder &_swig_upcall_Ref(DoubleHolder &x) {
    return Derived::Ref(x);
  }
  virtual DoubleHolder &Ref(DoubleHolder &x);
  DoubleHolder *_swig_upcall_Ptr(DoubleHolder *x) {
    return Derived::Ptr(x);
  }
  virtual DoubleHolder *Ptr(DoubleHolder *x);
  std::string _swig_upcall_FullyOverloaded__SWIG_0(int x) {
    return Derived::FullyOverloaded(x);
  }
  virtual std::string FullyOverloaded(int x);
  std::string _swig_upcall_FullyOverloaded__SWIG_1(bool x) {
    return Derived::FullyOverloaded(x);
  }
  virtual std::string FullyOverloaded(bool x);
  std::string _swig_upcall_SemiOverloaded(int x) {
    return Derived::SemiOverloaded(x);
  }
  virtual std::string SemiOverloaded(int x);
  std::string _swig_upcall_SemiOverloaded__SWIG_1(bool x) {
    return Base::SemiOverloaded(x);
  }
  virtual std::string SemiOverloaded(bool x);
  std::string _swig_upcall_DefaultParms__SWIG_0(int x, double y) {
    return Derived::DefaultParms(x,y);
  }
  virtual std::string DefaultParms(int x, double y);
  std::string _swig_upcall_DefaultParms__SWIG_1(int x) {
    return Derived::DefaultParms(x);
  }
  virtual std::string DefaultParms(int x);
 private:
  void *go_val;
};

class SwigDirector_BaseClass : public BaseClass
{
 public:
  SwigDirector_BaseClass(void *swig_p);
  virtual ~SwigDirector_BaseClass();
  int _swig_upcall_dofoo(int &one, int &two, int &three) {
    return BaseClass::dofoo(one,two,three);
  }
  virtual int dofoo(int &one, int &two, int &three);
 private:
  void *go_val;
};

class SwigDirector_DerivedClass : public DerivedClass
{
 public:
  SwigDirector_DerivedClass(void *swig_p);
  virtual ~SwigDirector_DerivedClass();
  int _swig_upcall_dofoo(int &one, int &two, int &three) {
    return BaseClass::dofoo(one,two,three);
  }
  virtual int dofoo(int &one, int &two, int &three);
 private:
  void *go_val;
};

#endif
